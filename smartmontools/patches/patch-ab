$NetBSD$

--- atacmds.h.orig	2003-10-15 18:06:02.000000000 +0400
+++ atacmds.h	2003-12-14 18:53:19.000000000 +0300
@@ -204,7 +204,7 @@
 /* Format of Read SMART THreshold Command */
 /* Compare to ata_smart_values above */
 #pragma pack(1)
-struct ata_smart_thresholds {
+struct ata_smart_thresholds_pvt {
   unsigned short int revnumber;
   struct ata_smart_threshold_entry thres_entries[NUMBER_ATA_SMART_ATTRIBUTES];
   unsigned char reserved[149];
@@ -333,11 +333,11 @@
 /* Read S.M.A.R.T information from drive */
 int ataReadHDIdentity(int device, struct ata_identify_device *buf);
 int ataReadSmartValues(int device,struct ata_smart_values *);
-int ataReadSmartThresholds(int device, struct ata_smart_thresholds *);
+int ataReadSmartThresholds(int device, struct ata_smart_thresholds_pvt *);
 int ataReadErrorLog(int device, struct ata_smart_errorlog *);
 int ataReadSelfTestLog(int device, struct ata_smart_selftestlog *);
 int ataSmartStatus(int device);
-int ataSetSmartThresholds(int device, struct ata_smart_thresholds *);
+int ataSetSmartThresholds(int device, struct ata_smart_thresholds_pvt *);
 int ataReadLogDirectory(int device, struct ata_smart_log_directory *);	
 
 /* Enable/Disable SMART on device */
@@ -377,7 +377,7 @@
 /* Check SMART for Threshold failure */
 // onlyfailed=0 : are or were any age or prefailure attributes <= threshold
 // onlyfailed=1:  are any prefailure attributes <= threshold now
-int ataCheckSmart ( struct ata_smart_values *data, struct ata_smart_thresholds *thresholds, int onlyfailed);
+int ataCheckSmart ( struct ata_smart_values *data, struct ata_smart_thresholds_pvt *thresholds, int onlyfailed);
 
 int ataSmartStatus2(int device);
 
@@ -428,7 +428,7 @@
 // prefail attribute.  Else we return minus the attribute number if it
 // is a usage attribute.
 int ataCheckAttribute(struct ata_smart_values *data,
-		      struct ata_smart_thresholds *thresholds,
+		      struct ata_smart_thresholds_pvt *thresholds,
 		      int n);
 
 // External handler function, for when a checksum is not correct.  Can
