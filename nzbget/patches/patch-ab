$NetBSD$

--- NZBQueue.cpp.orig	2005-09-02 09:00:41.000000000 +0200
+++ NZBQueue.cpp
@@ -31,6 +31,7 @@
 #include "global.h"
 #include "DownloadJob.h"
 #include "Frontend.h"
+#include <libgen.h>
 
 extern Frontend* g_pFrontend;
 
@@ -90,122 +91,117 @@ Job* NZBQueue::GetNextJob()
 
 void NZBQueue::parseSegment(xmlNodePtr node, std::vector<char*>* idlist, long long* size)
 {
-  if (!node)
-    return;
-  
-  if ((node->name) && (!strcmp((char*)node->name, "segment")))
+  // don't abuse recursion for a simple iteration, as this will blow up
+  // the stack.
+
+  for ( ; node != NULL; node = node->next)
     {
-      // segment-tag found
+      if ((node->name) && (!strcmp((char*)node->name, "segment")))
+	{
+	  // segment-tag found
 
-      if ((node->children) && (node->children->content))
-        {
-          // find segment-number and -size
-          xmlAttr* attr = node->properties;
-          long long lsize = -1;
-          int partNumber = -1;
-
-          while (attr)
-            {
-              if ((attr->name) && (!strcmp((char*)attr->name, "bytes")) && (attr->children))
-                {
-                  lsize = atol((char*) attr->children->content);
-                }
-
-              if ((attr->name) && (!strcmp((char*)attr->name, "number")) && (attr->children))
-                {
-                  partNumber = atol((char*) attr->children->content);
-                }
-
-              attr = attr->next;
-            }
-
-          if (partNumber > 0)
-            {
-              // make idlist big enough
-              while ((int)idlist->size() < partNumber)
-                idlist->push_back(NULL);
-
-              if ((*idlist)[partNumber-1] == NULL)
-                {
-                  // new segment, add it!
-                  char tmp[2048];
-                  snprintf(tmp, 2048, "<%s>", (char*)node->children->content);
-                  (*idlist)[partNumber-1] = strdup(tmp);
-
-                  if (lsize > 0)
-                    *size += lsize;
-                }
-            }
-        }
+	  if ((node->children) && (node->children->content))
+	    {
+	      // find segment-number and -size
+	      xmlAttr* attr = node->properties;
+	      long long lsize = -1;
+	      int partNumber = -1;
 
-      this->parseSegment(node->next, idlist, size);
-    }
-  else
-    {
-      this->parseSegment(node->next, idlist, size);
-      this->parseSegment(node->children, idlist, size);
+	      while (attr)
+		{
+		  if ((attr->name) && (!strcmp((char*)attr->name, "bytes")) && (attr->children))
+		    {
+		      lsize = atol((char*) attr->children->content);
+		    }
+
+		  if ((attr->name) && (!strcmp((char*)attr->name, "number")) && (attr->children))
+		    {
+		      partNumber = atol((char*) attr->children->content);
+		    }
+
+		  attr = attr->next;
+		}
+
+	      if (partNumber > 0)
+		{
+		  // make idlist big enough
+		  while ((int)idlist->size() < partNumber)
+		    idlist->push_back(NULL);
+
+		  if ((*idlist)[partNumber-1] == NULL)
+		    {
+		      // new segment, add it!
+		      char tmp[2048];
+		      snprintf(tmp, 2048, "<%s>", (char*)node->children->content);
+		      (*idlist)[partNumber-1] = strdup(tmp);
+
+		      if (lsize > 0)
+			*size += lsize;
+		    }
+		}
+	    }
+	}
+      else
+	{
+	  this->parseSegment(node->children, idlist, size);
+	}
     }
 }
 
 void NZBQueue::parseGroup(xmlNodePtr node, std::vector<char*>* grouplist)
 {
-  if (!node)
-    return;
-  
-  if ((node->name) && (!strcmp((char*)node->name, "group")))
-    {
-      //group-tag found
-      if ((node->children) && (node->children->content))
-        {
-          char tmp[2048];
-          snprintf(tmp, 2048, "%s", (char*)node->children->content);
-          grouplist->push_back(strdup(tmp));
-        }
-      this->parseGroup(node->next, grouplist);
-    }
-  else
+  for ( ; node != NULL; node = node->next)
     {
-      this->parseGroup(node->next, grouplist);
-      this->parseGroup(node->children, grouplist);
+      if ((node->name) && (!strcmp((char*)node->name, "group")))
+	{
+	  //group-tag found
+	  if ((node->children) && (node->children->content))
+	    {
+	      char tmp[2048];
+	      snprintf(tmp, 2048, "%s", (char*)node->children->content);
+	      grouplist->push_back(strdup(tmp));
+	    }
+	}
+      else
+	{
+	  this->parseGroup(node->children, grouplist);
+	}
     }
 }
 
 void NZBQueue::parseFile(xmlNodePtr node)
 {
-  if (!node)
-    return;
-
-  if ((node->name) && (!strcmp((char*)node->name, "file")))
+  for ( ; node != NULL; node = node->next)
     {
-      //file-tag found
-      DownloadJob* job = new DownloadJob();
+      if ((node->name) && (!strcmp((char*)node->name, "file")))
+	{
+	  //file-tag found
+	  DownloadJob* job = new DownloadJob();
 
-      xmlAttr* attr = node->properties;
-
-      while (attr)
-        {
-          if ((attr->name) && (!strcmp((char*)attr->name, "subject")) && (attr->children))
-            {
-              job->SetSubject((const char*)attr->children->content);
-              break;
-            }
-          attr = attr->next;
-        }
-
-      long long size = 0;
-
-      this->parseSegment(node->children, job->getMessageIDs(), &size);
-      this->parseGroup(node->children, job->getGroups());
-      job->setSize(size);
-      m_Jobs.push_back(job);
-      this->parseFile(node->next);
-    }
-  else
-    {
-      this->parseFile(node->children);
-      this->parseFile(node->next);
-    }
+	  xmlAttr* attr = node->properties;
 
+	  while (attr)
+	    {
+	      if ((attr->name) && (!strcmp((char*)attr->name, "subject")) && (attr->children))
+		{
+		  job->SetSubject((const char*)attr->children->content);
+		  break;
+		}
+	      attr = attr->next;
+	    }
+
+	  long long size = 0;
+
+	  this->parseSegment(node->children, job->getMessageIDs(), &size);
+	  this->parseGroup(node->children, job->getGroups());
+	  job->setSize(size);
+	  m_Jobs.push_back(job);
+	}
+      else
+	{
+	  this->parseFile(node->children);
+	}
+    }
   debug("%s",(char*)node);
 }
 
@@ -235,7 +231,7 @@ void NZBQueue::PrintProgressInfo()
 	char szBuffer[1024];
 	strcpy( szBuffer, basename( m_szFileName ) );
 	int iLength = strlen( szBuffer );
-	sprintf( szBuffer+iLength, " (%i/%i files)", m_Jobs.size(), m_iOriginalNumberOfJobs );
+	sprintf( szBuffer+iLength, " (%i/%i files)", (int)m_Jobs.size(), m_iOriginalNumberOfJobs );
 	g_pFrontend->FrontendInfo( szBuffer );
 }
 
