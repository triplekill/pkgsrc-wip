$NetBSD$

--- tools/gst-launch.c.orig	2003-04-15 22:39:13.000000000 +0200
+++ tools/gst-launch.c	2003-04-15 22:45:31.000000000 +0200
@@ -1,3 +1,6 @@
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
 #include <string.h>
 #include <stdlib.h>
 #include <signal.h>
@@ -112,16 +115,22 @@
 static void fault_restore(void);
 
 static void 
+#if defined(HAVE_SIGINFO_T) && defined(SA_SIGINFO)
 fault_handler (int signum, siginfo_t *si, void *misc)
+#else
+fault_handler (int signum)
+#endif
 {
   int spinning = TRUE;
-
+#if defined(HAVE_SIGINFO_T) && defined(SA_SIGINFO)
   /* dolphy has seen si == NULL;
    * that doesn't seem like a good idea, does it ? */
   g_assert (si);
+#endif
 
   fault_restore ();
 
+#if defined(HAVE_SIGINFO_T) && defined(SA_SIGINFO)
   if (si->si_signo == SIGSEGV) {
     g_print ("Caught SIGSEGV accessing address %p\n", si->si_addr);
   }
@@ -133,6 +142,17 @@
     g_print ("errno:  %d\n", si->si_errno);
     g_print ("code:   %d\n", si->si_code);
   }
+#else
+  if (signum == SIGSEGV) {
+    g_print ("Caught SIGSEGV\n");
+  }
+  else if (signum == SIGQUIT) {
+    g_print ("Caught SIGQUIT\n");
+  }
+  else {
+    g_print ("signo:   %d\n", signum);
+  }
+#endif
 
   glib_on_error_halt = FALSE;
   g_on_error_stack_trace ("gst-launch");
@@ -176,8 +196,12 @@
   struct sigaction action;
 
   memset (&action, 0, sizeof (action));
+#if defined(HAVE_SIGINFO_T) && defined(SA_SIGINFO)
   action.sa_sigaction = fault_handler;
   action.sa_flags = SA_SIGINFO;
+#else
+  action.sa_handler = fault_handler;
+#endif
 
   sigaction (SIGSEGV, &action, NULL);
   sigaction (SIGQUIT, &action, NULL);
