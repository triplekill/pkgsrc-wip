$NetBSD$

--- deps/libev/wscript.orig	2011-04-23 00:06:25.000000000 +0000
+++ deps/libev/wscript
@@ -1,7 +1,7 @@
 import Options
 import platform
 
-PLATFORM_IS_DARWIN = platform.platform().find('Darwin') == 0
+#PLATFORM_IS_DARWIN = platform.platform().find('Darwin') == 0
 PLATFORM_IS_WIN32 = platform.platform().find('Win') >= 0
 
 def set_options(opt):
@@ -16,58 +16,68 @@ def configure(conf):
   # the other is to define HAVE_EPOLL_CTL
   # Yes, WAF is a piece of shit.
 
-  if conf.check_cc(header_name="sys/inotify.h"):
+  if conf.check(header_name="sys/inotify.h"):
     conf.check_cc(header_name="sys/inotify.h", function_name="inotify_init")
 
-  if conf.check_cc(header_name="sys/epoll.h"):
+  if conf.check(header_name="sys/epoll.h"):
     conf.check_cc(header_name="sys/epoll.h", function_name="epoll_ctl")
 
-  if conf.check_cc(header_name="port.h"):
+  if conf.check(header_name="port.h"):
     conf.check_cc(header_name="port.h", function_name="port_create")
 
-  if conf.check_cc(header_name="poll.h"):
+  if conf.check(header_name="poll.h"):
     conf.check_cc(header_name="poll.h", function_name="poll")
 
-  conf.check_cc(header_name="sys/event.h")
-  conf.check_cc(header_name="sys/queue.h")
-  if PLATFORM_IS_DARWIN:
+  if conf.check(header_name="sys/event.h"):
     conf.check_cc(header_name="sys/event.h", function_name="kqueue")
-  else:
-    conf.check_cc(header_name="sys/queue.h", function_name="kqueue")
+
+#  conf.check_cc(header_name="sys/event.h")
+#  conf.check_cc(header_name="sys/queue.h")
+
+# ??? kqueue appears to be under sys/event.h under all platform man pages
+#  if PLATFORM_IS_DARWIN:
+#    conf.check_cc(header_name="sys/event.h", function_name="kqueue")
+#  else:
+#    conf.check_cc(header_name="sys/queue.h", function_name="kqueue")
 
   if PLATFORM_IS_WIN32:
     # Windows has sys/select.h and select but this config line doesn't detect it properly
     conf.define('HAVE_SYS_SELECT_H', 1);
     conf.define('HAVE_SELECT', 1);
   else:
-    if conf.check_cc(header_name="sys/select.h"):
+    if conf.check(header_name="sys/select.h"):
       conf.check_cc(header_name="sys/select.h", function_name="select")
 
-  if conf.check_cc(header_name="sys/eventfd.h"):
+  if conf.check(header_name="sys/eventfd.h"):
     conf.check_cc(header_name="sys/eventfd.h", function_name="eventfd")
 
-
-  code = """
-      #include <syscall.h>
-      #include <time.h>
-      #include <stdio.h>
-
-      int main() {
-          struct timespec ts; 
-          int status = syscall(SYS_clock_gettime, CLOCK_REALTIME, &ts);
-          return 0;
-      }
-  """
-  conf.check_cc(fragment=code, define_name="HAVE_CLOCK_SYSCALL", execute=True,
-                msg="Checking for SYS_clock_gettime")
-
-  have_librt = conf.check(lib='rt', uselib_store='RT')
-  if have_librt:
-    conf.check_cc(lib="rt", header_name="time.h", function_name="clock_gettime")
-  if PLATFORM_IS_DARWIN:
-    conf.check_cc(header_name="time.h", function_name="nanosleep")
-  elif have_librt:
-    conf.check_cc(lib="rt", header_name="time.h", function_name="nanosleep")
+  if conf.check(header_name="syscall.h"):
+    code = """
+        #include <syscall.h>
+        #include <time.h>
+        #include <stdio.h>
+
+        int main() {
+            struct timespec ts; 
+            int status = syscall(SYS_clock_gettime, CLOCK_REALTIME, &ts);
+            return 0;
+        }
+    """
+    conf.check_cc(fragment=code, define_name="HAVE_CLOCK_SYSCALL", execute=True,
+                  msg="Checking for SYS_clock_gettime")
+
+  have_clock_gettime = 0
+  have_nanosleep = 0
+
+  if conf.check(header_name="time.h"):
+    have_clock_gettime = conf.check_cc(header_name="time.h", function_name="clock_gettime")
+    have_nanosleep = conf.check_cc(header_name="time.h", function_name="nanosleep")
+
+  if conf.check(lib='rt', uselib_store='RT'):
+    if have_clock_gettime == 0:
+      conf.check_cc(lib="rt", header_name="time.h", function_name="clock_gettime")
+    if have_nanosleep == 0:
+      conf.check_cc(lib="rt", header_name="time.h", function_name="nanosleep")
 
   conf.check_cc(lib="m", header_name="math.h", function_name="ceil")
 
