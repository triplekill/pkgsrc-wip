$NetBSD$

--- src/sphinx.cpp.orig	Wed Oct  8 23:27:18 2008
+++ src/sphinx.cpp	Tue Mar 10 21:26:00 2009
@@ -697,7 +697,7 @@
 		}
 
 		if ( m_bMlock )
-			if ( -1==mlock ( m_pData, m_iLength ) )
+			if ( -1==mlock ( (char*)m_pData, m_iLength ) )
 				sWarning->SetSprintf ( "mlock() failed: %s", strerror(errno) );
 #endif // USE_WINDOWS
 
@@ -719,7 +719,7 @@
 		if ( !m_bMlock )
 			return true;
 
-		if ( mlock ( m_pData, m_iLength )!=-1 )
+		if ( mlock ( (char*)m_pData, m_iLength )!=-1 )
 			return true;
 
 		if ( sError.IsEmpty() )
@@ -742,7 +742,7 @@
 #else
 		if ( g_bHeadProcess )
 		{
-			int iRes = munmap ( m_pData, m_iLength );
+			int iRes = munmap ( (char*)m_pData, m_iLength );
 			if ( iRes )
 				sphWarn ( "munmap() failed: %s", strerror(errno) );
 		}
@@ -14376,12 +14376,12 @@
 /////////////////////////////////////////////////////////////////////////////
 
 template < typename T > T sphCRCWord ( const BYTE * pWord );
-template<> uint64_t sphCRCWord ( const BYTE * pWord ) { return sphFNV64 ( pWord ); }
-template<> DWORD sphCRCWord ( const BYTE * pWord ) { return sphCRC32 ( pWord ); }
+template<> uint64_t sphCRCWord<uint64_t> ( const BYTE * pWord ) { return sphFNV64 ( pWord ); }
+template<> DWORD sphCRCWord<DWORD> ( const BYTE * pWord ) { return sphCRC32 ( pWord ); }
 
 template < typename T > T sphCRCWord ( const BYTE * pWord, int iLen );
-template<> uint64_t sphCRCWord ( const BYTE * pWord, int iLen ) { return sphFNV64 ( pWord, iLen ); }
-template<> DWORD sphCRCWord ( const BYTE * pWord, int iLen ) { return sphCRC32 ( pWord, iLen ); }
+template<> uint64_t sphCRCWord<uint64_t> ( const BYTE * pWord, int iLen ) { return sphFNV64 ( pWord, iLen ); }
+template<> DWORD sphCRCWord<DWORD> ( const BYTE * pWord, int iLen ) { return sphCRC32 ( pWord, iLen ); }
 
 
 void CSphDictCRC::ApplyStemmers ( BYTE * pWord )
