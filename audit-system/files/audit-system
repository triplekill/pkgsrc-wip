#! @SH@
#
# $NetBSD$
#
# Copyright (c) 2008 The NetBSD Foundation, Inc.
# All rights reserved.
#
# This code is derived from software contributed to The NetBSD Foundation
# by Alistair Crooks.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

AWK=@AWK@
CHMOD=/bin/chmod
CKSUM=/usr/bin/cksum
MKDIR=/bin/mkdir
FIND=/usr/bin/find
FTP=/usr/bin/ftp
MV=/bin/mv
RM=/bin/rm

ERR_DOWNLOAD="Please run $0 -d."
ERR_UPGRADE="Please upgrade audit-system to the newest version."

: ${SYSVULNDIR=/var/db}
: ${FETCH_PROTO=ftp}
: ${FTP=ftp}

FTP_ARGS="-o"

FORMAT_MAJOR=1
FORMAT_MINOR=0
FORMAT_TEENY=0

# print a usage message and then die
usage() {
        argv0="${1##*/}"
        cat <<EOF
$2
Usage: $argv0 [-dv]
    -d : Run download-vulnerability-list before anything else.
    -v : Verbose mode
EOF
        exit 1
}

# script directory
scriptdir="/usr/sbin"

# use a non-null errmsg to indicate that something went wrong
errmsg=""
errsolution=""

# check the integrity of the file
check_integrity() {
	recordedsum=$(${AWK} '$1 == "#CHECKSUM" { print $3 }' $1)
	recordedalg=$(${AWK} '$1 == "#CHECKSUM" { print $2 }' $1)
	case "$recordedsum" in
	"")	errmsg="No checksum found in $2"
		errsolution="$ERR_DOWNLOAD"
		;;
	*)	case "$recordedalg" in
		"")	errmsg="No checksum algorithm found in $2"
			errsolution="$ERR_DOWNLOAD"
			;;
		*)	calcsum=$(${AWK} '$1 == "#CHECKSUM" || /\$NetBSD.*/ { next } { print }' $1 | ${CKSUM} -a $recordedalg)
			if [ "$recordedsum" != "$calcsum" ]; then
				errmsg="Checksum mismatch - recorded $recordedalg checksum \"$recordedsum\", calculated checksum \"$calcsum\""
				errsolution="$ERR_DOWNLOAD"
			fi
			;;
		esac
		;;
	esac
}

# if we have any configuration information, then read it
settingsmsg=""
if [ -r /etc/audit-system.conf ]; then
        settingsmsg="Reading settings from /etc/audit-system.conf"
        . /etc/audit-system.conf
fi

#vulsource="${FETCH_PROTO}://ftp.NetBSD.org/pub/NetBSD/audit-system/system-vulnerabilities" # XXX
vulsource="${FETCH_PROTO}://ftp.NetBSD.org/pub/NetBSD/misc/agc/audit-system/system-vulnerabilities"
vuls="${SYSVULNDIR}/system-vulnerabilities"
newvullist=system-vulnerabilities.$$

# process any command line arguments
download=no
verbose=no
while [ $# -gt 0 ]; do
        case "$1" in
        -d)     download=yes ;;
        -v)     verbose=yes ;;
        *)	usage "$0" "Unknown option $1"
        esac
        shift
done

# if we're verbose, tell the user what we already did
case $verbose in
yes)    case "$settingsmsg" in
        "")     ;;
        *)      echo "$settingsmsg"
                ;;
        esac
        ;;
esac

# try to download the system vulnerability list, as requested
# the integrity of the list is checked below
# so just issue a warning if there was a failure
case "$download" in
yes)    if [ ! -d ${SYSVULNDIR}/. ]; then
		echo "Creating ${SYSVULNDIR}"
		${MKDIR} -p ${SYSVULNDIR} || (echo "Can't create ${SYSVULNDIR}" 1>&2; exit 1)
	fi
	case ${FETCH_PROTO} in
	http) 	;;
	ftp)	;;
	*)	echo "Unknown FETCH_PROTO specified - Only http and ftp are currently supported."
		exit 1
		;;
	esac

	(cd ${SYSVULNDIR}
	${FTP} ${FTP_ARGS} "${newvullist}" "${vulsource}"

	# see if we got a file
	if [ ! -f "${newvullist}" ]; then
		echo "***WARNING*** Download of vulnerabilities file failed" 1>&2
		exit 1
	fi

	# see if the file got damaged while it was being downloaded
	check_integrity "${newvullist}" "downloaded vulnerability list"
	case "$errmsg" in
	"")	;;
	*)	echo "$errmsg" 1>&2
		${RM} -f "${newvullist}"
		exit 1
		;;
	esac

	# test to see if file has been changed
	neednew=false
	if [ -f "$vuls" ]; then
		oldsum=$(${AWK} '$1 == "#CHECKSUM" { print $3 }' "$vuls")
		if [ "$oldsum" != "$calcsum" ]; then
			neednew=true
		fi
	else
		neednew=true
	fi

	# if we need the new file, move it into position
	if $neednew; then
		echo "System vulnerabilities file has been updated"
		${CHMOD} a+r ${newvullist}
		${MV} -f ${newvullist} "$vuls"
	else
		echo "No change from existing system vulnerabilities file"
		${RM} -f ${newvullist}
	fi)
esac

errmsg=""

# check for missing vulnerabilities file
if [ ! -f "$vuls" ]; then
        errmsg="Missing vulnerabilities file $vuls"
        errsolution="$ERR_DOWNLOAD"
fi

# check for old vulnerabilities file if we're being verbose
case "$errmsg" in
"")     case "$verbose" in
        # XXX: quote vuls
        yes)    [ -n "$(${FIND} $vuls -ctime +7)" ] && echo "*** WARNING - $vuls more than a week old, continuing..." ;;
        esac
        ;;
esac

# check format version of vulnerabilities file
case "$errmsg" in
"")     file_major=$(${AWK} '/^#[ \t]*FORMAT/ { split($NF, a, "\\."); print a[1]; exit; }' "$vuls")
        file_minor=$(${AWK} '/^#[ \t]*FORMAT/ { split($NF, a, "\\."); print a[2]; exit; }' "$vuls")
        file_teeny=$(${AWK} '/^#[ \t]*FORMAT/ { split($NF, a, "\\."); print a[3]; exit; }' "$vuls")
        if [ -z "$file_teeny" ] ; then
                file_teeny=0
        fi
        if [ "x$file_major" = "x" -o "x$file_minor" = "x" ]; then
                errmsg="No file format version found in $vuls"
                errsolution="$ERR_DOWNLOAD"
        elif [ "$file_major" -ne "$FORMAT_MAJOR" -o "$file_minor" -gt "$FORMAT_MINOR" ]; then
                errmsg="Unsupported file format version $file_major.$file_minor${file_teeny:+.${file_teeny}} in $vuls (supported version: $FORMAT_MAJOR.$FORM
AT_MINOR.$FORMAT_TEENY)."
                if [ "$file_major" -le "$FORMAT_MAJOR" -o
                     \( "$file_major" -eq "$FORMAT_MAJOR" -a
                        "$file_minor" -lt "$FORMAT_MINOR" \) ]; then
                        errsolution="$ERR_DOWNLOAD"
                else
                        errsolution="$ERR_UPGRADE"
                fi
        fi
        ;;
esac

# check integrity of vulnerabilities file
check_integrity "$vuls" "$vuls"

# if we have found an error, then complain and exit
case "$errmsg" in
"")     ;;
*)      echo "***ERROR*** $errmsg" 1>&2
        echo "*** $errsolution" 1>&2
        exit 1
        ;;
esac

${AWK} -v scriptdir="$scriptdir" '
/^#.*/	{ next }
{
	cmd = sprintf("v=$(%s/audit-%s %s) && test -e %s && test $v -lt %s && echo %c%s (version $v before %s) could have a %s vulnerability (severity %s) - see %s%c",
		scriptdir, $2, $1,
		$1,
		$3,
		34, $1, $3, $4, $5, $6, 34);
	system(cmd);
}
' "$vuls"
