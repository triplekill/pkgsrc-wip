$NetBSD$

--- igal.orig	Mon Feb  3 04:44:38 2003
+++ igal
@@ -1,12 +1,10 @@
-: magical incantation finds Perl as long as it's in the user's path
-eval 'exec perl -wS $0 ${1+"$@"}'
-	if 0;
+#!@LOCALBASE@/bin/perl
 
 ############################################################################
 # Please change this accordingly if you change the DESTDIR in the tarball 
 # distribution Makefile or the --prefix of the RPM installation
-$LIBDIR = "/usr/local/lib/igal";
-# for example if you make DESTDIR=/usr then $LIBDIR="/usr/lib/igal"
+$LIBDIR = "@LOCALBASE@/share/igal";
+# for example if you make DESTDIR=@LOCALBASE@ then $LIBDIR="@LOCALBASE@/lib/igal"
 ############################################################################
 #
 # Note to do-it-yourselvers and Computer Science types:  the IGAL code is
@@ -24,7 +22,7 @@ $LIBDIR = "/usr/local/lib/igal";
 # identify and convert) then setting this equal to 1 may speed up the code a
 # bit (igal will stop checking for these commands every time it runs)
 #
-$HAVEIM = 0;
+$HAVEIM = 1;
 ############################################################################
 # If you KNOW you have the libjpeg stuff installed (e.g commands like cjpeg,
 # djpeg and pnmscale) then setting this equal to 1 may speed up the code a
@@ -53,6 +51,10 @@ $HAVELJ = 0;
 # Author: Eric Pop, Dept. of Electrical Engineering, Stanford University
 # Email: epop@stanford.edu
 
+# updated by Alexander Zangerl <az@debian.org> 2003 for Debianization
+# building on modifications by Robert McQueen <robot101@debian.org>
+# for the initial Debian package (copyright 2000 and 2001)
+
 use FileHandle;
 use Getopt::Long;
 
@@ -95,6 +97,8 @@ $opt_con = "";         # options to be p
 $opt_help = "0";       # displays brief usage message; same as -h
 $opt_www = "0";        # makes everything world-readable
 $opt_xy = "0";         # scale thumbs to n pixels in their longer dimension
+$opt_clean=0;		# clean up all generated files
+$opt_title = "Index of Pictures";
 
 $usage = <<"END_OF_USAGE";
 This is iGal 1.4 an HTML image slide show generator.
@@ -103,7 +107,7 @@ Options:      -a          write image si
               -c          first generate and then use captions
               -C          like -c, but preserve file names as captions
               -d <dir>    operate on files in directory <dir> (.)
-              -f          force thumbnail regeneration
+              -f          force thumbnail regeneration and scaled slides
               -h          displays this brief help; same as --help
               -i <file>   name of the main thumbnail index file (index.html)
               -k          use the image captions for the HTML slide titles
@@ -123,6 +127,8 @@ Options:      -a          write image si
               --help      displays this brief help; same as -h
               --www       make all iGal files world-readable
               --xy <n>    scale thumbs to <n> pixels in their longer dimension
+              --title <s> string to substitute for TITLE in index template
+              --clean     remove all generated files
 Note:      default values are given in parentheses (where applicable).
 Author:    Eric Pop <epop\@stanford.edu>
 URL:       http://www.stanford.edu/~epop/igal
@@ -135,15 +141,29 @@ END_OF_USAGE
 # process command-line arguments (overriding defaults above)
 GetOptions('a','c','C','d=s','f','h','i=s','k','n','p=i',
            'r','s','t=i','u','w=i','x','y=i','ad','as','bigy=i',
-           'con=s','help','im','www','xy=i') or die "$usage";
+           'con=s','help','im','www','xy=i','clean','title=s') or die "$usage";
 
 die $usage if ($opt_help or $opt_h);
+
+if ($opt_clean)
+{
+    print "Removing all igal files: ";
+    opendir(D,$opt_d) || die "bad directory specification!\n";
+    foreach (readdir(D))
+    {
+	/^($thumbprefix.*|$slideprefix.*|$csstemplate|$indextemplate|$slidetemplate|\.$itile|.*\.html|$captionfile)$/ 
+	    && unlink("$opt_d/$_");
+    }
+    closedir(D);
+    print "done!\n";
+    exit 0;
+}
+
+
 # deal with the competing -y and --xy options
 if (($opt_y == 0) and ($opt_xy == 0)) {
 	$opt_y = 75;    # default, if neither -y nor --xy is specified
-} else {
-	$opt_f = "1";   # if either is specified, force thumbnail regeneration
-}
+    }
 die "Please only specify one of the -y and --xy options\n" if ($opt_y and $opt_xy);
 # other error (sanity) checks
 die "Please enter nonnegative thumbnail dimensions\n" if (($opt_y < 0) or ($opt_xy < 0));
@@ -158,7 +178,7 @@ die "Please enter a nonnegative tiled im
 $opt_d =~ s/\/$//;
 
 # let users store their templates in a $HOME/.igal directory, if it exists,
-# instead of the site-wide /usr/local/lib/igal (from line 8 up top)
+# instead of the site-wide @LOCALBASE@/lib/igal (from line 8 up top)
 $LIBDIR = $userigaldir if ((-r $userigaldir) && (-d $userigaldir));
 
 # load up image files from $opt_d into array @imgfiles
@@ -223,7 +243,7 @@ print "\n" unless ($first);
 if ($opt_c or $opt_C) {
 	if (! -r "$opt_d/$captionfile") {
 		# create $captionfile file if it doesn't exist
-		print "Found $nfiles image files in directory $opt_d\n";
+		print "Found $nfiles image files in ".($opt_d eq "."?"current directory":"directory $opt_d")."\n";
 		die "Please select more files for your slide show!\n" if ($nfiles <= 1);
 		open(CAP,">$opt_d/$captionfile") or die "Can't create $opt_d/$captionfile file\n";
 		print "Creating the $captionfile file...\n";
@@ -297,7 +317,7 @@ die "ERROR:  the necessary image process
 # generate .thumbnails in the same directory with the original image files
 # if they don't exist already or if the -f switch is given
 
-print "Creating thumbnails:  ";
+print "Creating thumbnails: ";
 for ($i = 0; $i < $nfiles; $i++) {
 	$file = $imgfiles[$i];
 	$fullfile = "$opt_d/$file";
@@ -321,19 +341,20 @@ for ($i = 0; $i < $nfiles; $i++) {
 			}
 		}
 		system("$command") if ($command);
-		print "$thumbprefix$file " if ($command);
+		print "." if ($command);
 	}
 }
-print "... done!\n";
+print " done!\n";
 
 # determine image file sizes
 if ($HAVEIM && !($opt_bigy)) {
-	print "Determining image sizes ";
+	print "Determining image sizes: ";
 	foreach $file (@imgfiles) {
 		$fullfile = "$opt_d/$file";
 		$temp = `identify -ping -format \"\%wx\%h %b\" \"$fullfile\"`;
 		$temp =~ m/(\d+)x(\d+)\s([\d\.]+[mkb]*)/i;
 		push(@xdim,$1);  push(@ydim,$2);  $temp = $3;
+		$temp.="kb" if ($temp !~ /[mkb]+$/i);
 		# round nicely in kb if identify returned the size in bytes
 		$temp = sprintf ("%.1fk", $temp/1024) if ($temp =~ s/([\d\.]+)b*$/$1/i);
 		push(@isiz,$temp);
@@ -357,7 +378,18 @@ if ($opt_bigy and !($opt_s)) {
 		$fullslide = "$opt_d/$slideprefix$file";
 		if ((! -e $fullslide) or $opt_f) {
 			if ($HAVEIM) {
+
+			    # only scale down, never up.
+			    $temp=`identify -ping -format \"\%h\" \"$fullfile\"`;
+			    chomp $temp;
+			    if ($temp<=$opt_bigy)
+			    {
+				$command="cp -f \"$fullfile\" \"$fullslide\"";
+			    }
+			    else
+			    {
 				$command = "convert $opt_con -scale x$opt_bigy \"$fullfile\" \"$fullslide\"";
+			    }
 			} else {
 				if ($imgext[$i] =~ m/(gif|png)/i) {
 					print "\nIgnoring $file:  get ImageMagick (imagemagick.org) to process GIF and PNG files.\n";
@@ -370,18 +402,19 @@ if ($opt_bigy and !($opt_s)) {
 				}
 			}
 			system("$command") if ($command);
-			print "$slideprefix$file " if ($command);
+			print "." if ($command);
 		}
 		if ($HAVEIM) {
 			$temp = `identify -ping -format \"\%wx\%h %b\" \"$fullslide\"`;
 			$temp =~ m/(\d+)x(\d+)\s([\d\.]+[mkb]*)/i;
 			push(@xdim,$1);  push(@ydim,$2);  $temp = $3;
+			$temp.="kb" if ($temp!~/[mkb]$/i);
 			# round nicely in kb if identify returned the size in bytes
 			$temp = sprintf ("%.1fk", $temp/1024) if ($temp =~ s/([\d\.]+)b*$/$1/i);
 			push(@isiz,$temp);
 		}
 	}
-	print "... done!\n";
+	print " done!\n";
 }
 
 # create the individual slide show files
@@ -402,14 +435,6 @@ if ($opt_s) {
 		}
 	}
 	system("rm -f \"$opt_d/*.html\"");
-	if (! -e "$opt_d/$csstemplate") {
-		print "No CSS template file ... getting $LIBDIR/$csstemplate\n";
-		die "$LIBDIR cannot be read or does not exist.\nPlease install igal properly.\n" unless (-r $LIBDIR);
-		die "$LIBDIR/$csstemplate cannot be read or does not exist.\nPlease install igal properly.\n" unless (-r "$LIBDIR/$csstemplate");
-		system("cp -f $LIBDIR/$csstemplate \"$opt_d/\"");
-	} else {
-		print "Found CSS template file $csstemplate ... using it.\n";
-	}
 	if (! -e "$opt_d/.$slidetemplate") {
 		print "No .$slidetemplate file ... getting a copy from $LIBDIR/\n";
 		die "$LIBDIR cannot be read or does not exist.\nPlease install igal properly.\n" unless (-r $LIBDIR);
@@ -418,11 +443,11 @@ if ($opt_s) {
 	} else {
 		print "Found .$slidetemplate file ... using it.\n";
 	}
-	print "Creating individual slides:  ";
+	print "Creating individual slides: ";
 	for ($i = 0; $i < $nfiles; $i++) {
 		open(SR,"$opt_d/.$slidetemplate") or die "Can't open the slide template file\n";
 		open(SW,">$opt_d/$slides[$i]") or die "Can't create slide file\n";
-		print "$slides[$i] ";
+		print ".";
 		if ($opt_k) {    # use image caption for the HTML slide title
 			$title = $captions[$i];
 		} else {         # otherwise use the image name (strip suffix)
@@ -431,6 +456,7 @@ if ($opt_s) {
 		}
 		while (defined($line = <SR>)) {
 			$line =~ s/<!--SLIDE-TITLE-->/$title/g;
+			$line =~ s/<!--TITLE-->/$opt_title/g;
 			if ($line =~ m/<!--THIS-IMAGE-->/g) {
 				if ($opt_bigy) {
 					$slide = $slideprefix . $imgfiles[$i];
@@ -455,30 +481,35 @@ if ($opt_s) {
 			}
 			$line =~ s/<!--IMAGE-CAPTION-->/$imagecaption/g;
 			$line =~ s/<!--INDEX-FILE-->/$opt_i/g;
+			$line =~ s/<!--THIS-SLIDE-->/$slides[$i]/g;
 			if ($opt_bigy) {
 				$pref = $slideprefix;
 			} else {
 				$pref = "";
 			}
-			if ($i == 0) {
-				$line =~ s/<!--NEXT-IMAGE-->/$pref$imgfiles[$i+1]/g;
-				$line =~ s/<!--PREV-SLIDE-->/\"$slides[$nfiles-1]\" title=\"$captions[$nfiles-1]\"/g;
-				$line =~ s/<!--NEXT-SLIDE-->/\"$slides[$i+1]\" title=\"$captions[$i+1]\"/g;
-			} elsif ($i == $nfiles-1) {
-				$line =~ s/<!--NEXT-IMAGE-->/$pref$imgfiles[0]/g;
-				$line =~ s/<!--PREV-SLIDE-->/\"$slides[$i-1]\" title=\"$captions[$i-1]\"/g;
-				$line =~ s/<!--NEXT-SLIDE-->/\"$slides[0]\" title=\"$captions[0]\"/g;
-			} else {
-				$line =~ s/<!--NEXT-IMAGE-->/$pref$imgfiles[$i+1]/g;
-				$line =~ s/<!--PREV-SLIDE-->/\"$slides[$i-1]\" title=\"$captions[$i-1]\"/g;
-				$line =~ s/<!--NEXT-SLIDE-->/\"$slides[$i+1]\" title=\"$captions[$i+1]\"/g;
+
+			if ($opt_k) # use caption for title attribute
+			{    
+			    $prev=$captions[$i-1];
+			    $next=$captions[($i==$nfiles-1?0:$i+1)];
+			} 
+			else  # otherwise use the image name (strip suffix)
+			{
+			    $prev=$imgfiles[$i-1];
+			    $next=$imgfiles[($i==$nfiles-1?0:$i+1)];
+			    $next=~s/\.\w+?$//; $prev=~s/\.\w+?$//;
 			}
+			
+			$line =~ s/<!--NEXT-IMAGE-->/$pref$imgfiles[($i==$nfiles-1?0:$i+1)]/g;
+			$line =~ s/<!--PREV-SLIDE-->/\"$slides[$i-1]\" title=\"$prev\"/g;
+			$line =~ s/<!--NEXT-SLIDE-->/\"$slides[($i==$nfiles-1?0:$i+1)]\" title=\"$next\"/g;
+
 			print SW "$line";
 		}
 		close(SW);
 		close(SR);
 	}
-	print "... done!\n";
+	print " done!\n";
 }
 
 # create the main index file with all the thumbnails
@@ -508,22 +539,35 @@ if (! -e "$opt_d/.$indextemplate") {
 	print "Found .$indextemplate ... using it.\n";
 }
 
+if (! -e "$opt_d/$csstemplate") {
+    print "No CSS template file ... getting $LIBDIR/$csstemplate\n";
+    die "$LIBDIR cannot be read or does not exist.\nPlease install igal properly.\n" unless (-r $LIBDIR);
+    die "$LIBDIR/$csstemplate cannot be read or does not exist.\nPlease install igal properly.\n" unless (-r "$LIBDIR/$csstemplate");
+    system("cp -f $LIBDIR/$csstemplate \"$opt_d/\"");
+} else {
+    print "Found CSS template file $csstemplate ... using it.\n";
+}
+
+
 $rows = int $nfiles/$opt_w;     # number of film rows
 $rem = $nfiles % $opt_w;        # number of thumbnails on last (incomplete) row
-print "Creating the $opt_i file ";
+print "Creating the $opt_i file: ";
 open(IXR,"$opt_d/.$indextemplate") or die "Can't open the index template file\n";
 open(IXW,">$opt_d/$opt_i") or die "Can't create main $opt_i file\n";
 # detect where the <!-- ********** --> line is
 while (defined($line = <IXR>)) {
 	$line =~ s/IGAL-OPTIONS/@igal_options/g;
+        $line =~ s/<!--TITLE-->/$opt_title/g;
+        $line =~ s/<!--FIRST-IMAGE-->/$imgfiles[0]/g;
 	print IXW "$line";
 	last if ($line =~ m/\*{10}/);
 }
 # write out the tables with full rows
 for ($i = 1; $i <= $rows; $i++) {
 	print IXW "<TABLE border=0 cellspacing=0 cellpadding=$opt_p>\n";
-	print IXW "  <TR><TD class=\"tiled\" height=$opt_t colspan=", $opt_w+2, ">&nbsp;</TD></TR>\n" unless ($opt_r);
-	print IXW "  <TR>\n    <TD class=\"thumb\">&nbsp;</TD>\n";
+	print IXW "  <TR><TD class=\"tiled\" height=$opt_t colspan=", ($opt_r?$opt_w:$opt_w+2), ">&nbsp;</TD></TR>\n" unless ($opt_r);
+	print IXW "  <TR>";
+	print IXW "\n    <TD class=\"thumb\">&nbsp;</TD>\n" unless ($opt_r);
 	for ($j = 1; $j <= $opt_w; $j++) {
 		print IXW "    <TD class=\"thumb\">\n      ";
 		if ($opt_s) {
@@ -532,7 +576,13 @@ for ($i = 1; $i <= $rows; $i++) {
 			print IXW "<A href=\"", $slides[($i-1)*$opt_w+$j-1], "\">";
 		}
 		print ".";
-		$altname = $captions[($i-1)*$opt_w+$j-1];
+		if ($opt_k) {    # use image caption for the alt attribute
+		    $altname = $captions[($i-1)*$opt_w+$j-1];
+		} else {         # otherwise use the image name (strip suffix)
+			$altname = $imgfiles[($i-1)*$opt_w+$j-1];
+			$altname =~ s/\.\w+?$//;
+		}
+
 		$thumb = $thumbprefix . $imgfiles[($i-1)*$opt_w+$j-1];
 		if ($HAVEIM) {
 			$temp = `identify -ping -format \"\%wx\%h\" \"$opt_d/$thumb\"`;
@@ -543,10 +593,12 @@ for ($i = 1; $i <= $rows; $i++) {
 		}
 		print IXW "</A></TD>\n";
 	}
-	print IXW "    <TD class=\"thumb\">&nbsp;</TD>\n  </TR>\n";
+	print IXW "    <TD class=\"thumb\">&nbsp;</TD>" unless ($opt_r);
+	print IXW "\n  </TR>\n";
 	print IXW "  <TR><TD class=\"tiled\" height=$opt_t colspan=", $opt_w+2, ">&nbsp;</TD></TR>\n" unless ($opt_r);
 	if (($opt_a or $opt_ad or $opt_as) and $HAVEIM) {
-		print IXW "  <TR>\n    <TD>&nbsp;</TD>\n";
+		print IXW "  <TR>\n";
+		print "<TD>&nbsp;</TD>\n" unless ($opt_r);
 		for ($j = 1; $j <= $opt_w; $j++) {
 			print IXW "    <TD>";
 			$printdim = "$isiz[($i-1)*$opt_w+$j-1]" if $opt_as;
@@ -559,7 +611,8 @@ for ($i = 1; $i <= $rows; $i++) {
 	}
 #	write image captions under images if option -u is given
 	if ($opt_u) {
-		print IXW "  <TR>\n    <TD>&nbsp;</TD>\n";
+		print IXW "  <TR>\n";
+		print IXW "<TD>&nbsp;</TD>\n" unless ($opt_r);
 		for ($j = 1; $j <= $opt_w; $j++) {
 			print IXW "    <TD>$captions[($i-1)*$opt_w+$j-1]</TD>\n";
 		}
@@ -571,7 +624,8 @@ for ($i = 1; $i <= $rows; $i++) {
 if ($rem >= 1) {
 	print IXW "<TABLE border=0 cellspacing=0 cellpadding=$opt_p>\n";
 	print IXW "  <TR><TD class=\"tiled\" height=$opt_t colspan=", $rem+2, ">&nbsp;</TD></TR>\n" if (! $opt_r);
-	print IXW "  <TR>\n    <TD class=\"thumb\">&nbsp;</TD>\n";
+	print IXW "  <TR>\n";
+	print IXW "<TD class=\"thumb\">&nbsp;</TD>\n" unless ($opt_r);
 	for ($i = 1; $i <= $rem; $i++) {
 		print IXW "    <TD class=\"thumb\">\n      ";
 		if ($opt_s) {
@@ -591,10 +645,12 @@ if ($rem >= 1) {
 		}
 		print IXW "</A></TD>\n";
 	}
-	print IXW "    <TD class=\"thumb\">&nbsp;</TD>\n  </TR>\n";
+	print IXW "    <TD class=\"thumb\">&nbsp;</TD>\n" unless ($opt_r);
+	print IXW "  </TR>\n";
 	print IXW "  <TR><TD class=\"tiled\" height=$opt_t colspan=", $rem+2, ">&nbsp;</TD></TR>\n" if (! $opt_r);
 	if (($opt_a or $opt_ad or $opt_as) and $HAVEIM) {
-		print IXW "  <TR>\n    <TD>&nbsp;</TD>\n";
+	    print IXW "  <TR>\n";
+	    print IXW "<TD>&nbsp;</TD>\n" unless ($opt_r);
 		for ($i = 1; $i <= $rem; $i++) {
 			print IXW "    <TD>";
 			$printdim = "$isiz[$rows*$opt_w+$i-1]" if $opt_as;
@@ -607,7 +663,8 @@ if ($rem >= 1) {
 	}
 #	write image captions under images if option -u is given
 	if ($opt_u) {
-		print IXW "  <TR>\n    <TD>&nbsp;</TD>\n";
+		print IXW "  <TR>\n";
+		print IXW "    <TD>&nbsp;</TD>\n" unless ($opt_r);
 		for ($i = 1; $i <= $rem; $i++) {
 			print IXW "    <TD>$captions[$rows*$opt_w+$i-1]</TD>\n";
 		}
@@ -617,6 +674,7 @@ if ($rem >= 1) {
 }
 while (!(<IXR> =~ m/\*{10}/)) {};
 while (defined($line = <IXR>)) {
+    $line =~ s/<!--TITLE-->/$opt_title/g;
 	print IXW "$line";
 }
 close(IXW);
