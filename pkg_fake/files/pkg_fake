#!/bin/sh
#
# pancake@phreaker.net
#
# installs or removes fake packages
# into pkgsrc database

PKGDB=/var/db/pkg
PREFIX=/usr/pkg

show_help()
{
cat <<EOF
pkg_fake [-alrihARL] [pkgname]

 fake packages:
   -l : list all fake packages
   -i : install a new fake package
   -r : remove a fake package
   -h : show this message
   -a : adds new files to 

 fake alternatives:
   -A : adds fake alternatives to a package
   -R : remove fake alternative support to a package
   -L : list all fake alternatives

EOF
}

list_all()
{
	cd ${PKGDB}
	for A in `ls`; do
		if [ -e "${A}/+FAKE" ]; then
		COMMENT="`cat ${A}/+COMMENT`"
		printf "${A}\t\t${COMMENT}\n"
		fi
	done
}

list_all_alternatives()
{
	cd ${PKGDB}
	for A in `ls`; do
		if [ -e "${A}/+FAKE_ALT" ]; then
		COMMENT="`cat ${A}/+COMMENT`"
		printf "${A}\t\t${COMMENT}\n"
		fi
	done
}

edit_alternatives()
{
	PKG="$1"
	echo "Type in editor the wrapper lines in format:"
	echo "\"bin/python /usr/pkg/bin/python2p3\""
	echo
	echo "press enter" 
	read
	${EDITOR} "${PKGDB}/${PKG}/+ALTERNATIVES"
	pkg_alternatives register "${PKGDB}/${PKG}/+ALTERNATIVES"
}

if [ -z "${1}" ]; then
	show_help
fi

while : ; do
	if [ -z "$1" ]; then break; fi
	case $1 in
	"-l") # list all fake packages installed
		list_all
		exit 0
	;;
	"-L") # list all fake alternatives
		list_all_alternatives
		exit 0
	;;
	"-i") # install new fake package
		if [ "${2}" = "" ]; then
			echo "pkgname required";
			exit 1
		fi
		PKGNAME="${2}"
		if [ -d "${PKGDB}/${2}" ]; then
			echo "package ${2} yet exists."
			exit 1
		fi
		printf "comment: "
		read COMMENT
		# create package
		
		mkdir -p "${PKGDB}/${2}"
		:> "${PKGDB}/${2}/+FAKE"
		echo "@name ${2}"       > "${PKGDB}/${2}/+CONTENTS"
		echo "@cwd ${PREFIX}"   > "${PKGDB}/${2}/+CONTENTS"
		echo "OBJECT_FMT=ELF"   > "${PKGDB}/${2}/+BUILD_INFO"
		echo "OPSYS=`uname -s`" > "${PKGDB}/${2}/+BUILD_INFO" 
		:> "${PKGDB}/${2}/+DESC"
		:> "${PKGDB}/${2}/+SIZE_ALL"
		:> "${PKGDB}/${2}/+SIZE_PKG"
		echo "${COMMENT}" > "${PKGDB}/${2}/+COMMENT"

		echo "[i] package created."
		exit 0
	;;
	"-A") # creates a new fake alternative
		if [ -z "${2}" ]; then
			echo "pkgname required"
			exit 1
		fi

		if [ ! -d "${PKGDB}/${2}" ]; then
			echo "This package does not exists."
			exit 1
		fi
		PKGNAME="${2}"

		if [ -e "${PKGDB}/${2}/+ALTERNATIVES" ]; then
			if [ -e "${PKGDB}/${2}/+FAKE_ALT" ]; then
				edit_alternatives ${2}
			else
				echo "This is not a valid fake alternatives package."
			fi
		else
			:> "${PKGDB}/${2}/+FAKE_ALT"
			edit_alternatives ${2}
		fi
		exit 0
	;;
	"-r") # removes a fake package
		if [ "${2}" = "" ]; then
			echo "pkgname required";
			exit 1
		fi

		if [ ! -d "${PKGDB}/${2}" ]; then
			echo "This package does not exists."
			exit 1
		fi
		A=${2}
		if [ -e "${PKGDB}/${A}" ]; then
			if [ -e "${PKGDB}/${A}/+FAKE" ]; then
				rm -rf "${PKGDB}/${A}"
				if [ "$?" = "0" ]; then
				echo "package removed."
				exit 0
				else
				echo "cannot remove pacakge. check permissions."
				exit 1
				fi
			else
				echo "target package isn't fake. not removed."
				exit 1
			fi
		else
			cd ${PKGDB}
			for B in * ; do
			case $B in ${A}*) OTH="${OTH} ${B}"; ;; esac
			done
			if [ -z "${OTH}" ]; then
				echo "package not found."
				exit 1
			else
				echo "[i] did you mean?"
				for A in ${OTH}; do
				echo ${A}
				done
				exit 0
			fi
		fi
	;;
	"-R") # removes a fake alternatives
		if [ -z "${2}" ]; then
			echo "pkgname required";
			exit 1
		fi
		if [ ! -d "${PKGDB}/${2}" ]; then
			echo "This package does not exists."
			exit 1
		fi

		if [ -e "${PKGDB}/${2}/+FAKE_ALT" ]; then
			pkg_alternatives -gs unregister "${PKGDB}/${2}/+ALTERNATIVES"
			rm -f "${PKGDB}/${2}/+ALTERNATIVES" &&
			rm -f "${PKGDB}/${2}/+FAKE_ALT" &&\
			echo "Fake alternatives removed from ${2}"
		else
			echo "this is not a fake alternative package"
		fi
		exit 0;
	;;
	""|*|"-h") # shows help message
		show_help
		exit 0
	;;
	esac
	shift;
done

exit 1
