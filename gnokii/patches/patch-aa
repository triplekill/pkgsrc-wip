$NetBSD$

--- configure.in.orig	2007-11-24 11:31:01.000000000 +0000
+++ configure.in
@@ -282,7 +282,7 @@ AC_ARG_ENABLE(libical,
                             ),,
        	      [enable_libical=yes])
 
-if test "$enable_libical" == "yes"; then
+if test "$enable_libical" = "yes"; then
 	OLD_CFLAGS="$CFLAGS"
 	LIBS="$LIBS $ICAL_LIBS -lpthread -lical"
 	CFLAGS="$CFLAGS $ICAL_CFLAGS"
@@ -323,7 +323,7 @@ AC_ARG_ENABLE(libusb,
                              [enable libusb support (default is autodetected)]
                             ),,
               [enable_libusb=yes])
-if test "$enable_libusb" == "yes"; then
+if test "$enable_libusb" = "yes"; then
 	AC_MSG_CHECKING(whether libusb is installed)
 	AC_TRY_COMPILE([#include <usb.h>],
 		[struct usb_dev_handle *dev;],
@@ -350,7 +350,7 @@ AC_ARG_ENABLE(irda,
                              [enable irda support (default is autodetected)]
                             ),,
               [enable_irda=yes])
-if test "$enable_irda" == "yes"; then
+if test "$enable_irda" = "yes"; then
 	AC_CHECK_HEADER(linux/irda.h,
 		[AC_DEFINE(HAVE_IRDA)
 		 USE_IRDA="yes"],,
@@ -378,7 +378,7 @@ AC_ARG_ENABLE(bluetooth,
                              [enable bluetooth support (default is autodetected)]
                             ),,
               [enable_bluetooth=yes])
-if test "$enable_bluetooth" == "yes"; then
+if test "$enable_bluetooth" = "yes"; then
 	AC_MSG_CHECKING([for the bluetooth support])
 	AC_CACHE_CHECK(for the struct sockaddr_rc in <bluetooth/rfcomm.h>, ac_cv_have_sockaddr_rc,
 		[AC_TRY_COMPILE([#include <sys/socket.h>
@@ -392,10 +392,11 @@ if test "$enable_bluetooth" == "yes"; th
 		AC_DEFINE(HAVE_BLUETOOTH_BLUEZ,[],[Compile on Linux])
 		USE_BLUETOOTH="yes"
 		LIBS="$LIBS -lbluetooth"
+		AC_CHECK_FUNCS(str2ba bacpy baswap)
 	fi
 fi
 dnl ======================== Checks for MacOSX Bluetooth support
-if test "$enable_bluetooth" == "yes"; then
+if test "$enable_bluetooth" = "yes"; then
 	AC_MSG_CHECKING([for the MacOS X bluetooth support])
 	AC_CHECK_HEADERS(CoreFoundation/CoreFoundation.h)
 	AC_CHECK_HEADERS(IOBluetooth/Bluetooth.h)
@@ -420,7 +421,7 @@ if test "$enable_bluetooth" == "yes"; th
 fi
 
 dnl ======================== Checks for FreeBSD/netgraph Bluetooth support
-if test "$enable_bluetooth" == "yes"; then
+if test "$enable_bluetooth" = "yes"; then
 	AC_MSG_CHECKING([for the FreeBSD/netgraph bluetooth support])
 	AC_CACHE_CHECK(for the struct sockaddr_rfcomm in <netgraph/.../ng_btsocket.h>, ac_cv_have_sockaddr_rfcomm,
 		[AC_TRY_COMPILE([#include <sys/types.h>
@@ -437,11 +438,31 @@ if test "$enable_bluetooth" == "yes"; th
 		AC_DEFINE(HAVE_BLUETOOTH)
 		AC_DEFINE(HAVE_BLUETOOTH_NETGRAPH,[],[Compile on FreeBSD])
 		USE_BLUETOOTH="yes"
-		AC_CHECK_LIB(bluetooth, bt_aton,
-			    [LIBS="$LIBS -lbluetooth" AC_DEFINE(HAVE_BT_ATON,[],[Define to 1 if you have the \`bt_aton' function.])])
+		LIBS="$LIBS -lbluetooth"
+		AC_CHECK_FUNCS(bt_aton)
 	fi
 fi
 
+dnl ======================== Checks for NetBSD/netbt Bluetooth support
+AC_CACHE_CHECK([for struct sockaddr_bt in <bluetooth.h>], ac_cv_have_sockaddr_bt,
+	[AC_TRY_COMPILE([#include <bluetooth.h>],
+		[struct sockaddr_bt rc;],
+		ac_cv_have_sockaddr_bt=yes,
+		ac_cv_have_sockaddr_bt=no)])
+
+if test $ac_cv_have_sockaddr_bt = yes; then
+	AC_DEFINE(HAVE_BLUETOOTH)
+	AC_DEFINE(HAVE_BLUETOOTH_NETBT,[],[Compile on NetBSD])
+	USE_BLUETOOTH="yes"
+	LIBS="$LIBS -lbluetooth"
+	AC_CHECK_FUNCS(bt_aton)
+fi
+ 
+dnl ======================== Check if sockaddr has length field
+AC_TRY_COMPILE([#include <sys/socket.h>],
+		[struct sockaddr sa; sa.sa_len;],
+		AC_DEFINE(SOCKADDR_HAS_LEN, [], [struct sockaddr has length field]))
+
 dnl ======================== Checks for libpcsclite
 USE_LIBPCSCLITE="no"
 AC_ARG_ENABLE(libpcsclite,
@@ -449,9 +470,9 @@ AC_ARG_ENABLE(libpcsclite,
                              [enable libpcsclite support (default is autodetected)]
                             ),,
               [enable_libpcsclite=yes])
-if test "$enable_libpcsclite" == "yes"; then
+if test "$enable_libpcsclite" = "yes"; then
 	PKG_CHECK_MODULES(LIBPCSCLITE, libpcsclite >= 1.4.2, USE_LIBPCSCLITE=yes, USE_LIBPCSCLITE=no)
-	if test "$USE_LIBPCSCLITE" == yes; then
+	if test "$USE_LIBPCSCLITE" = yes; then
 		OLD_CFLAGS="$CFLAGS"
 		CFLAGS="$LIBPCSCLITE_CFLAGS $OLD_CFLAGS"
 		AC_MSG_CHECKING([if libpcsclite includes are installed and usable])
@@ -466,7 +487,7 @@ if test "$enable_libpcsclite" == "yes"; 
 				USE_LIBPCSCLITE=no)
 		AC_MSG_RESULT($USE_LIBPCSCLITE)
 		CFLAGS="$OLD_CFLAGS"
-		if test "$USE_LIBPCSCLITE" == yes; then
+		if test "$USE_LIBPCSCLITE" = yes; then
 			AC_DEFINE([HAVE_PCSC], [1], [Define if you have libpcsclite])
 		fi
 	fi
