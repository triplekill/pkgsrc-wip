Description: adds support for NetBSD in GRUB configuration file generation.

--- configure.ac.orig	2010-01-02 14:42:26.000000000 +0100
+++ configure.ac
@@ -115,6 +115,7 @@ case "$host_os" in
   gnu*)				host_kernel=hurd ;;
   linux*)			host_kernel=linux ;;
   freebsd* | kfreebsd*-gnu)	host_kernel=kfreebsd ;;
+  netbsd*)			host_kernel=netbsd ;;
   cygwin)			host_kernel=windows ;;
 esac
 
--- util/grub-mkconfig.in.orig	2010-01-02 14:42:38.000000000 +0100
+++ util/grub-mkconfig.in
@@ -214,11 +214,14 @@ export GRUB_DEFAULT \
   GRUB_DISTRIBUTOR \
   GRUB_CMDLINE_LINUX \
   GRUB_CMDLINE_LINUX_DEFAULT \
+  GRUB_CMDLINE_NETBSD \
+  GRUB_CMDLINE_NETBSD_DEFAULT \
   GRUB_TERMINAL_INPUT \
   GRUB_TERMINAL_OUTPUT \
   GRUB_SERIAL_COMMAND \
   GRUB_DISABLE_LINUX_UUID \
   GRUB_DISABLE_LINUX_RECOVERY \
+  GRUB_DISABLE_NETBSD_RECOVERY \
   GRUB_GFXMODE \
   GRUB_DISABLE_OS_PROBER
 
--- util/grub.d/10_netbsd.in.orig
+++ util/grub.d/10_netbsd.in
@@ -0,0 +1,75 @@
+#! /bin/sh -e
+
+# grub-mkconfig helper script.
+# Copyright (C) 2006,2007,2008,2009,2010  Free Software Foundation, Inc.
+#
+# GRUB is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# GRUB is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.
+
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+bindir=@bindir@
+libdir=@libdir@
+gettext=@GETTEXTBIN@
+. ${libdir}/grub/grub-mkconfig_lib
+
+if [ "x${gettext}" != "xecho" ] && ! test -x "${gettext}" ; then
+  echo "10_netbsd: error: \`${gettext}' is missing." >&2
+  exit 1
+fi
+
+export TEXTDOMAIN=@PACKAGE@
+export TEXTDOMAINDIR=@localedir@
+
+if [ "x${GRUB_DISTRIBUTOR}" = "x" ] ; then
+  OS=NetBSD
+else
+  OS="${GRUB_DISTRIBUTOR} NetBSD"
+fi
+
+netbsd_entry ()
+{
+  kernel="$1"	# absolute path to the kernel file
+  msg="$2"	# extra message appended to the menu title
+  args="$3"	# extra arguments appended to knetbsd command
+
+  kroot_device="$(echo ${GRUB_DEVICE} | sed -e 's,^/dev/r,,')"
+  title="$(${gettext} "%s, with kernel %s${msg}")"
+
+  printf "menuentry \"${title}\" {\n" \
+    "${OS}" "$(echo ${kernel} | sed -e 's,^.*/,,')"
+  printf "%s\n" "${prepare_boot_cache}"
+  printf "\tknetbsd %s -r %s %s\n" \
+    "${kernel}" "${kroot_device}" "${GRUB_CMDLINE_NETBSD} ${args}"
+  printf "}\n"
+}
+
+prepare_boot_cache="$(prepare_grub_to_access_device ${GRUB_DEVICE} | sed -e 's,^,	,')"
+
+# We look for NetBSD kernels in / but not in subdirectories.  We simply
+# pick all statically linked ELF executable files (or links) in / with a
+# name that starts with `netbsd'.
+for k in $(ls -t /netbsd*) ; do
+  if ! grub_file_is_not_garbage "$k" ; then
+    continue
+  fi
+  if ! (file -bL "$k" 2>/dev/null | grep -q "^ELF[^,]*executable.*statically linked") ; then
+    continue
+  fi
+
+  echo "Found NetBSD kernel: $k" >&2
+  netbsd_entry "$k" "" "${GRUB_CMDLINE_NETBSD_DEFAULT}"
+  if [ "x${GRUB_DISABLE_NETBSD_RECOVERY}" != "xtrue" ]; then
+    netbsd_entry "$k" " (recovery mode)" "-s"
+  fi
+done
