$NetBSD$

--- pmlist.c.orig	2006-02-02 08:53:39.000000000 +0900
+++ pmlist.c
@@ -244,7 +244,7 @@ int pmlist_AddPortMapping (int enabled, 
 
 	iptc_add_rule("nat", g_vars.preroutingChainName, protocol, g_vars.extInterfaceName, NULL, NULL, NULL, NULL, externalPort, "DNAT", buffer, TRUE);
 	free(buffer);
-#else
+#elif defined(USE_IPTABLES)
 	char command[500];
 	int status;
 	
@@ -278,6 +278,26 @@ int pmlist_AddPortMapping (int enabled, 
 	    wait(&status);		
 	  }
 	}
+#else
+	char rules[512];
+	char command[512];
+	GetIpAddressStr(ExternalIPAddress, g_vars.extInterfaceName);
+#if defined(USE_PF)
+	snprintf(command, sizeof(command), "/sbin/pfctl -a upnpd/%s-%s-%s-%s-%s-%s -f -", g_vars.extInterfaceName, protocol, ExternalIPAddress, externalPort, internalClient, internalPort);
+	FILE *pf = popen(command, "w");
+	if (pf == NULL) return 0;
+	snprintf(rules, sizeof(rules), "rdr pass on %s proto %s from any to %s port %s -> %s port %s", g_vars.extInterfaceName, protocol, ExternalIPAddress, externalPort, internalClient, internalPort);
+	trace(3, "%s", rules);
+	fprintf(pf, rules);
+	pclose(pf);
+#elif defined(USE_IPFILTER)
+	FILE *ipnat = popen("/usr/sbin/ipnat -f -", "w");
+	if (ipnat == NULL) return 0;
+	snprintf(rules, sizeof(rules), "rdr %s %s/32 port %s -> %s port %s %s", g_vars.extInterfaceName, ExternalIPAddress, externalPort, internalClient, internalPort, protocol);
+	trace(3, "%s", rules);
+	fprintf(ipnat, rules);
+	pclose(ipnat);
+#endif
 #endif
     }
     return 1;
@@ -298,7 +318,7 @@ int pmlist_DeletePortMapping(int enabled
 
 	iptc_delete_rule("nat", g_vars.preroutingChainName, protocol, g_vars.extInterfaceName, NULL, NULL, NULL, NULL, externalPort, "DNAT", buffer);
 	free(buffer);
-#else
+#elif defined(USE_IPTABLES)
 	char command[500];
 	int status;
 	
@@ -334,6 +354,28 @@ int pmlist_DeletePortMapping(int enabled
 	    wait(&status);		
 	  }
 	}
+#elif defined(USE_PF)
+	char anchor[128];
+	snprintf(anchor, sizeof(anchor), "upnpd/%s-%s-%s-%s-%s-%s", g_vars.extInterfaceName, protocol, ExternalIPAddress, externalPort, internalClient, internalPort);
+	trace(3, "flush anchor %s", anchor);
+	{
+		int status;
+		char *args[] =  {"-a", anchor, "-F", "all"};
+		if(!fork()) {
+			int rc = execv("/sbin/ipctl", args);
+			exit(rc);
+		} else {
+			wait(&status);
+		}
+	}
+#elif defined(USE_IPFILTER)
+	char rules[512];
+	FILE *ipnat = popen("/usr/sbin/ipnat -rf -", "w");
+	if (ipnat == NULL) return 0;
+	snprintf(rules, sizeof(rules), "rdr %s %s/32 port %s -> %s port %s %s", g_vars.extInterfaceName, ExternalIPAddress, externalPort, internalClient, internalPort, protocol);
+	trace(3, "remove %s", rules);
+	fprintf(ipnat, rules);
+	pclose(ipnat);
 #endif
     }
     return 1;
