#!/usr/pkg/bin/perl
# Check the duplication on gnuradio-*/PLIST  (except gnuradio-default)
# use -h for usage.

use strict;
use Getopt::Std;

our(%opts);
our(@ARGV);

my ($PKGSRC)	='/usr/pkgsrc';
my ($CATEGORY)	='wip';
my (@LIST);	# list of gnuradio-*/PLIST files
my (%WORDS);
my (%count);
my (%FULL); 	# full list from gnuradio-default
my ($DEFAULT) = 'gnuradio-default';

sub usage() {
    print <<HELP;
$0
Synopsys:
    check-PLIST-overwrap [-h] [-c CATEGORY] [-m] [-p PATH] 
Where:
    -h	show this help
    -c  CATEGORY (wip)
    -m  print missing file instead of dupes
    -p  pkgsrc directory (/usr/pkgsrc)
    (parenthesis) shows default value
HELP
}

getopts("hc:mp:", \%opts);
if ($opts{'h'}) { usage(); exit;}
if ($opts{'c'}) { $CATEGORY = $opts{'c'};}
if ($opts{'p'}) { $PKGSRC   = $opts{'p'};}
my ($WORK)	= $PKGSRC.'/'.$CATEGORY;

print "(Category) $CATEGORY (pkgsrc) $PKGSRC \n";
    
chdir $WORK;
print 'Changing to directory: ', $WORK,"\n";
opendir(DIR, $WORK) || die "Problem opening directory ($WORK)\n";

my ($dir) = 1;
while ($dir) {
    $dir = readdir (DIR);
    chomp($dir);
    if ( $dir =~ /^$DEFAULT/ ) { next; } # skip -default at this time
    if ( $dir =~ /^gnuradio/ ) {
	my($PLIST) = $dir.'/PLIST';
	if ( -f $PLIST ) {
	    push(@LIST, $PLIST);
	}
    }
}
foreach my $d (0..$#LIST) {
    my $file = $LIST[$d];
    open (FILE, $file) || print "problem opening $file: $!\n";
    while(<FILE>) {
	chomp();
	if (/\@comment/) { next;}
	if (/\@pkgdir/)	{ next;}
	my ($word) = $_;
	my ($module) = $file;
	$file =~ s/gnuradio-//;
	$file =~ s,/PLIST,,;
	$WORDS{$word} .= ' '.$file;
	$count{$word}++;
    }
    close(FILE);
}
if ($opts{'m'}) {
    my ($file) = $DEFAULT.'/PLIST'; 
    open (FILE, $file) || print "problem opening $file: $!\n";
    while (<FILE>) {
	chomp();
	if (/\@comment/) { next;}
	if (/\@pkgdir/)	{ next;}
	my ($word) = $_;
	my ($module) = $file;
	$file =~ s/gnuradio-//;
	$file =~ s,/PLIST,,;
	$FULL{$word}++;
    }
    close(FILE);
    foreach my $key (sort keys %FULL){
	if ($WORDS{$key} ) { next;}
	else {
	    printf ("missing: %30s\t\n", $key);
	}	    
    }
}

sub show_dupe() {
    foreach my $key (sort keys %WORDS){
	if ($count{$key} > 1 ) {
	    printf ("%30s\t->%s\n", $key, $WORDS{$key});
	}
    }    
}

sub show_missing() {
}

if ($opts{'m'}) { show_missing();}
else	        { show_dupe();}
exit;
