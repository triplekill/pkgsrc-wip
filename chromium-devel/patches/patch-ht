$NetBSD$

--- net/base/host_resolver_proc.cc.orig	2010-09-13 15:17:55.000000000 +0000
+++ net/base/host_resolver_proc.cc
@@ -7,6 +7,9 @@
 #include "build/build_config.h"
 
 #if defined(OS_POSIX) && !defined(OS_MACOSX)
+#if defined(OS_NETBSD)
+#include <arpa/inet.h>
+#endif
 #include <resolv.h>
 #endif
 
@@ -156,7 +159,7 @@ int SystemHostResolverProc(const std::st
       hints.ai_family = AF_UNSPEC;
   }
 
-#if defined(OS_WIN) || defined(OS_OPENBSD)
+#if defined(OS_WIN) || defined(OS_OPENBSD) || defined(OS_NETBSD)
   // DO NOT USE AI_ADDRCONFIG ON WINDOWS.
   //
   // The following comment in <winsock2.h> is the best documentation I found
@@ -187,8 +190,10 @@ int SystemHostResolverProc(const std::st
   // On Linux AI_ADDRCONFIG doesn't consider loopback addreses, even if only
   // loopback addresses are configured. So don't use it when there are only
   // loopback addresses.
+#if !defined(OS_WIN) && !defined(OS_OPENBSD) && !defined(OS_NETBSD)
   if (host_resolver_flags & HOST_RESOLVER_LOOPBACK_ONLY)
     hints.ai_flags &= ~AI_ADDRCONFIG;
+#endif
 
   if (host_resolver_flags & HOST_RESOLVER_CANONNAME)
     hints.ai_flags |= AI_CANONNAME;
@@ -211,6 +216,15 @@ int SystemHostResolverProc(const std::st
   // detection), and the results where all localhost of a single family,
   // maybe we should retry.  There were several bugs related to these
   // issues, for example http://crbug.com/42058 and http://crbug.com/49024
+#if defined(OS_WIN) || defined(OS_OPENBSD) || defined(OS_NETBSD)
+  if ((hints.ai_family != AF_UNSPEC) &&
+      err == 0 && IsAllLocalhostOfOneFamily(ai)) {
+    if (host_resolver_flags & HOST_RESOLVER_DEFAULT_FAMILY_SET_DUE_TO_NO_IPV6) {
+      hints.ai_family = AF_UNSPEC;
+      should_retry = true;
+    }
+  }
+#else
   if ((hints.ai_family != AF_UNSPEC || hints.ai_flags & AI_ADDRCONFIG) &&
       err == 0 && IsAllLocalhostOfOneFamily(ai)) {
     if (host_resolver_flags & HOST_RESOLVER_DEFAULT_FAMILY_SET_DUE_TO_NO_IPV6) {
@@ -222,6 +236,7 @@ int SystemHostResolverProc(const std::st
       should_retry = true;
     }
   }
+#endif
   if (should_retry) {
     freeaddrinfo(ai);
     ai = NULL;
