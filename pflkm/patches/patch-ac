$NetBSD$

--- lkm/pf.c.orig	2003-06-04 08:17:00.000000000 +0200
+++ lkm/pf.c
@@ -1,4 +1,4 @@
-/*	$OpenBSD: pf.c,v 1.328 2003/03/21 12:47:36 cedric Exp $ */
+/*     $OpenBSD: pf.c,v 1.328.2.6 2004/03/14 00:15:05 brad Exp $ */
 
 /*
  * Copyright (c) 2001 Daniel Hartmeier
@@ -1571,7 +1571,6 @@ pf_get_sport(sa_family_t af, u_int8_t pr
 {
 	struct pf_tree_node	key;
 	struct pf_addr		init_addr;
-	int			step;
 	u_int16_t		cut;
 
 	bzero(&init_addr, sizeof(init_addr));
@@ -1610,30 +1609,26 @@ pf_get_sport(sa_family_t af, u_int8_t pr
 				return (0);
 			}
 		} else {
-			if (low < high) {
-				step = 1;
-				cut = arc4random() % (1 + high - low) + low;
-			} else {
-				step = -1;
-				cut = arc4random() % (1 + low - high) + high;
-			}
+			if (low > high) {
+				u_int16_t tmp;
 
-			*nport = cut - step;
-			do {
-				*nport += step;
+				tmp = low;
+				low = high;
+				high = tmp;
+			}
+			/* low < high */
+			cut = arc4random() % (1 + high - low) + low;
+			/* low <= cut <= high */
+			for (*nport = cut; *nport <= high; ++(*nport)) {
 				key.port[1] = htons(*nport);
 				if (pf_find_state(&tree_ext_gwy, &key) == NULL)
 					return (0);
-			} while (*nport != low && *nport != high);
-
-			step = -step;
-			*nport = cut;
-			do {
-				*nport += step;
+			}
+			for (*nport = cut - 1; *nport >= low; --(*nport)) {
 				key.port[1] = htons(*nport);
 				if (pf_find_state(&tree_ext_gwy, &key) == NULL)
 					return (0);
-			} while (*nport != low && *nport != high);
+			}
 		}
 
 		switch (rpool->opts & PF_POOL_TYPEMASK) {
@@ -1778,13 +1773,12 @@ pf_get_translation(int direction, struct
 				else
 					PF_POOLMASK(naddr,
 					    &r->src.addr.v.a.addr,
-					    &r->src.addr.v.a.mask, saddr, af);
+					    &r->src.addr.v.a.mask, daddr, af);
 				break;
 			}
 			break;
 		case PF_RDR: {
-			if (pf_map_addr(r->af, &r->rpool,
-			    &r->src.addr.v.a.addr, naddr, NULL))
+			if (pf_map_addr(r->af, &r->rpool, saddr, naddr, NULL))
 				return (NULL);
 
 			if (r->rpool.proxy_port[1]) {
@@ -2671,6 +2665,7 @@ pf_test_other(struct pf_rule **rm, struc
 		/* check incoming packet for BINAT/RDR */
 		if ((rdr = pf_get_translation(PF_IN, ifp, pd->proto,
 		    saddr, 0, daddr, 0, &naddr, NULL, af)) != NULL) {
+			PF_ACPY(&baddr, daddr, af);
 			switch (af) {
 #ifdef INET
 			case AF_INET:
@@ -3008,7 +3003,7 @@ pf_test_state_tcp(struct pf_state **stat
 	    /* Retrans: not more than one window back */
 	    (ackskew >= -MAXACKWINDOW) &&
 	    /* Acking not more than one window back */
-	    (ackskew <= MAXACKWINDOW)) {
+	    (ackskew <= (MAXACKWINDOW << sws))) {
 	    /* Acking not more than one window forward */
 
 		(*state)->packets++;
@@ -3150,7 +3145,7 @@ pf_test_state_tcp(struct pf_state **stat
 			    SEQ_GEQ(seq, src->seqlo - (dst->max_win << dws)) ?
 			    ' ': '2',
 			    (ackskew >= -MAXACKWINDOW) ? ' ' : '3',
-			    (ackskew <= MAXACKWINDOW) ? ' ' : '4',
+			    (ackskew <= (MAXACKWINDOW << sws)) ? ' ' : '4',
 			    SEQ_GEQ(src->seqhi + MAXACKWINDOW, end) ?' ' :'5',
 			    SEQ_GEQ(seq, src->seqlo - MAXACKWINDOW) ?' ' :'6');
 		}
@@ -3889,9 +3884,6 @@ pf_routable(struct pf_addr *addr, sa_fam
 }
 
 #ifdef INET
-#ifdef __NetBSD__
-#include "ip_fragment.c"
-#endif
 void
 pf_route(struct mbuf **m, struct pf_rule *r, int dir, struct ifnet *oifp,
     struct pf_state *s)
@@ -4043,8 +4035,10 @@ pf_route(struct mbuf **m, struct pf_rule
 
 	m1 = m0;
 	error = ip_fragment(m0, ifp, ifp->if_mtu);
-	if (error == EMSGSIZE)
+	if (error) {
+		m0 = NULL;
 		goto bad;
+	}
 
 	for (m0 = m1; m0; m0 = m1) {
 		m1 = m0->m_nextpkt;
