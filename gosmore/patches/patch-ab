$NetBSD$

--- libgosm.cpp.orig	2010-02-12 11:16:21.000000000 +0000
+++ libgosm.cpp
@@ -483,7 +483,7 @@ void Route (int recalculate, int plon, i
     routeHeapSize = 1; /* Leave position 0 open to simplify the math */
     #ifndef _WIN32
     int dzero = open ("/dev/zero", O_RDWR);
-    long long ds = sysconf (_SC_PAGESIZE) * (long long) sysconf (_SC_PHYS_PAGES) /
+    long long ds = sysconf (_SC_PAGESIZE) * 200000 /
       (sizeof (*routeHeap) + sizeof (*route) + 40);
     dhashSize = ds > INT_MAX ? INT_MAX : ds;
     routeHeapMaxSize = lrint (sqrt (dhashSize)) * 3;
@@ -1395,7 +1395,7 @@ int RebuildPak(const char* pakfile, cons
   int ndStart;
   wayType *master = NULL;
   if (strcmp(masterpakfile,"")) {
-    if (!(masterf = fopen64 (masterpakfile, "r")) ||
+    if (!(masterf = fopen (masterpakfile, "r")) ||
 	fseek (masterf, -sizeof (ndStart), SEEK_END) != 0 ||
 	fread (&ndStart, sizeof (ndStart), 1, masterf) != 1 ||
 	(long)(master = (wayType *)mmap (NULL, ndStart, PROT_READ,
@@ -1406,7 +1406,7 @@ int RebuildPak(const char* pakfile, cons
     }
   }
   
-  if (!(pak = fopen64 (pakfile, "w+"))) {
+  if (!(pak = fopen (pakfile, "w+"))) {
     fprintf (stderr, "Cannot create %s\n",pakfile);
     return 2;
   }
@@ -1429,7 +1429,7 @@ int RebuildPak(const char* pakfile, cons
   for (int i = 0; i < PAIRGROUP2 (0) + PAIRGROUPS2; i++) {
     sprintf (groupName[i], "%c%c%d.tmp", i / 26 % 26 + 'a', i % 26 + 'a',
 	     i / 26 / 26);
-    if (i < S2GROUP (0) && !(groupf[i] = fopen64 (groupName[i], "w+"))) {
+    if (i < S2GROUP (0) && !(groupf[i] = fopen (groupName[i], "w+"))) {
       fprintf (stderr, "Cannot create temporary file.\n"
 	       "Possibly too many open files, in which case you must run "
 	       "ulimit -n or recompile\n");
@@ -1827,7 +1827,7 @@ int RebuildPak(const char* pakfile, cons
   
   for (int i = 0; i < IDXGROUPS; i++) fclose (groupf[i]);
   for (int i = S2GROUP (0); i < PAIRGROUP2 (0) + PAIRGROUPS2; i++) {
-    assert (groupf[i] = fopen64 (groupName[i], "w+"));
+    assert (groupf[i] = fopen (groupName[i], "w+"));
   } // Avoid exceeding ulimit
   
   nodeType *nodes = (nodeType *) malloc (sizeof (*nodes) * MAX_NODES);
@@ -2083,7 +2083,7 @@ int RebuildPak(const char* pakfile, cons
   
 #ifndef LAMBERTUS
   REBUILDWATCH (for (int i = 0; i < IDXGROUPS; i++)) {
-    assert (groupf[i] = fopen64 (groupName[i], "r+"));
+    assert (groupf[i] = fopen (groupName[i], "r+"));
     fseek (groupf[i], 0, SEEK_END);
     int fsize = ftell (groupf[i]);
     if (fsize > 0) {
