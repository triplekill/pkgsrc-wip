$NetBSD$

--- src/plugins/joy.py.orig	2005-10-16 05:18:49.000000000 -0400
+++ src/plugins/joy.py
@@ -18,6 +18,11 @@
 # only activate plugin when joystick is working
 #
 # -----------------------------------------------------------------------
+# Modified by David Howland
+# This new module requires CALIBRATION before it goes into normal
+#  operation! Just move the joystick all around to its maximum, and then
+#  press button 1.
+# -----------------------------------------------------------------------
 # Freevo - A Home Theater PC framework
 # Copyright (C) 2003 Krister Lagerstrom, et al. 
 # Please see the file freevo/Docs/CREDITS for a complete list of authors.
@@ -46,6 +51,9 @@ import struct
 import traceback
 from time import sleep
 
+import pygame
+from pygame.locals import *
+
 import config
 import plugin
 import rc
@@ -62,66 +70,73 @@ class PluginInterface(plugin.DaemonPlugi
             self.reason = 'Joystick input module disabled'
             return
 
-        self.device_name = '/dev/input/js' + str((config.JOY_DEV - 1))
+        pygame.joystick.init()
+
+        num_joy = pygame.joystick.get_count()
+        print "Found %d joysticks." % num_joy
+
+        if num_joy < 1:
+            self.reason = 'No joysticks found'
+            return
 
-        try:
-            self.joyfd = os.open(self.device_name, os.O_RDONLY|os.O_NONBLOCK)
-        except OSError:
-            
-            print 'Unable to open %s, trying /dev/js%s...' % \
-                  (self.device_name, str((config.JOY_DEV - 1)))
-            self.device_name = '/dev/js' + str((config.JOY_DEV - 1))
-
-            try:
-                self.joyfd = os.open(self.device_name, os.O_RDONLY|os.O_NONBLOCK)
-            except OSError:
-                print 'Unable to open %s, check modules and/or permissions' % \
-                      self.device_name
-                self.reason = 'unable to open device'
-                return
+        self.Joystick = pygame.joystick.Joystick(config.JOY_DEV-1)
+        self.Joystick.init()
+        print "Using joystick:", self.Joystick.get_name()
+        print "with: %d axis %d hats %d buttons" % (self.Joystick.get_numaxes(),self.Joystick.get_numhats(),self.Joystick.get_numbuttons())
+
+        self.HMIN = 0
+        self.HMAX = 0
+        self.VMIN = 0
+        self.VMAX = 0
+        self.UnCal = 1
 
         # ok, joystick is working
         plugin.DaemonPlugin.__init__(self)
         
-        print 'using joystick', config.JOY_DEV
-        
         self.poll_interval  = 1
         self.poll_menu_only = False
 
 
     def poll(self):
-        command = ''    
-        _debug_('self.joyfd = %s' % self.joyfd, level=3)
-        (r, w, e) = select.select([self.joyfd], [], [], 0)
-        _debug_('r,w,e = %s,%s,%s' % (r,w,e), level=3)
-        
-        if r:
-            c = os.read(self.joyfd, 8)
-        else: 
-            return
+        command = ''
+
+        for i in range(self.Joystick.get_numbuttons()):
+            if(self.Joystick.get_button(i)):
+                if ((self.UnCal == 1) & (i == 0)):
+                    self.UnCal = 0
+                else:
+                    button = "button %d" % (i + 1)
+                    command = config.JOY_CMDS.get(button, '')
+
+        if command == '':
+            for i in range(2):
+                value = self.Joystick.get_axis(i)
+                if (i == 0):
+                    if (value > self.HMAX):
+                        self.HMAX = value
+                    if (value < self.HMIN):
+                        self.HMIN = value
+                    if (value > (self.HMAX*0.9)):
+                        if self.UnCal != 1:
+                            command = config.JOY_CMDS['right']
+                    if (value < (self.HMIN*0.9)):
+                        if self.UnCal != 1:
+                            command = config.JOY_CMDS['left']
+                if (i == 1):
+                    if (value > self.VMAX):
+                        self.VMAX = value
+                    if (value < self.VMIN):
+                        self.VMIN = value
+                    if (value > (self.HMAX*0.9)):
+                        if self.UnCal != 1:
+                            command = config.JOY_CMDS['down']
+                    if (value < (self.HMIN*0.9)):
+                        if self.UnCal != 1:
+                            command = config.JOY_CMDS['up']
 
-        data = struct.unpack('IhBB', c)
-        if data[2] == 1 & data[1] == 1:
-            button = 'button '+str((data[3] + 1))
-            command = config.JOY_CMDS.get(button, '')
-            sleep(0.3) # the direction pad can use lower debounce time
-        if data[2] == 2:
-            if ((data[3] == 1) & (data[1] < -16384)):
-                button = 'up'
-                command = config.JOY_CMDS['up']
-            if ((data[3] == 1) & (data[1] > 16384)):
-                button = 'down'
-                command = config.JOY_CMDS['down']
-            if ((data[3] == 0) & (data[1] < -16384)):
-                button = 'left'
-                command = config.JOY_CMDS['left']
-            if ((data[3] == 0) & (data[1] > 16384)):
-                button = 'right'
-                command = config.JOY_CMDS['right']
         if command != '':
-            _debug_('Translation: "%s" -> "%s"' % (button, command))
             command = rc.key_event_mapper(command)
             if command:
                 rc.post_event(command)
-    
+		sleep(0.1)
 
