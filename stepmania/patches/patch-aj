$NetBSD$

--- src/arch/Threads/Threads_Pthreads.cpp.orig	2004-09-09 01:58:47.000000000 +0400
+++ src/arch/Threads/Threads_Pthreads.cpp
@@ -4,7 +4,7 @@
 #include <sys/time.h>
 #include <errno.h>
 
-#if defined(LINUX)
+#if defined(LINUX) || defined(BSD)
 #include "archutils/Unix/LinuxThreadHelpers.h"
 #include "archutils/Unix/RunningUnderValgrind.h"
 #endif
@@ -32,7 +32,7 @@ void ThreadImpl_Pthreads::Resume()
 	ResumeThread( threadHandle );
 }
 
-uint64_t ThreadImpl_Pthreads::GetThreadId() const
+PTHREAD_T ThreadImpl_Pthreads::GetThreadId() const
 {
 	return threadHandle;
 }
@@ -70,7 +70,7 @@ static void *StartThread( void *pData )
 	return (void *) pThis->m_pFunc( pThis->m_pData );
 }
 
-ThreadImpl *MakeThread( int (*pFunc)(void *pData), void *pData, uint64_t *piThreadID )
+ThreadImpl *MakeThread( int (*pFunc)(void *pData), void *pData, PTHREAD_T *piThreadID )
 {
 	ThreadImpl_Pthreads *thread = new ThreadImpl_Pthreads;
 	thread->m_pFunc = pFunc;
@@ -188,12 +188,12 @@ void MutexImpl_Pthreads::Unlock()
 	pthread_mutex_unlock( &mutex );
 }
 
-uint64_t GetThisThreadId()
+PTHREAD_T GetThisThreadId()
 {
 	return GetCurrentThreadId();
 }
 
-uint64_t GetInvalidThreadId()
+PTHREAD_T GetInvalidThreadId()
 {
 	return 0;
 }
