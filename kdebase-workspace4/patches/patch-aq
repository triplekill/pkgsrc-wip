$NetBSD$

--- kcontrol/infocenter/info/info_netbsd.cpp.orig	2006-10-26 15:11:57.000000000 +1300
+++ kcontrol/infocenter/info/info_netbsd.cpp
@@ -39,7 +39,7 @@
 
 #include <QFile>
 #include <QFontMetrics>
-#include <qstrlist.h>
+#include <Q3StrList>
 #include <QTextStream>
 
 #include <kdebug.h>
@@ -52,7 +52,7 @@ typedef struct
   const char	*title;
   } hw_info_mib_list_t;
 
-bool GetInfo_CPU(QListView *lBox)
+bool GetInfo_CPU(Q3ListView *lBox)
 {
   static hw_info_mib_list_t hw_info_mib_list[]= {
 	{ 1, HW_MODEL,		"Model" },
@@ -92,7 +92,7 @@ bool GetInfo_CPU(QListView *lBox)
 		sysctl(mib,2,&num,&len,NULL,0);
 		value = QString::number(num);
 	}
-	new QListViewItem(lBox, hw_info_mib->title, value);
+	new Q3ListViewItem(lBox, hw_info_mib->title, value);
    }
 
    return true;
@@ -100,8 +100,8 @@ bool GetInfo_CPU(QListView *lBox)
 
 // this is used to find out which devices are currently
 // on system
-static bool GetDmesgInfo(QListView *lBox, const char *filter,
-	void func(QListView *, QString s))
+static bool GetDmesgInfo(Q3ListView *lBox, const char *filter,
+	void func(Q3ListView *, QString s))
 {
         QFile *dmesg = new QFile("/var/run/dmesg.boot");
 	bool usepipe = false;
@@ -121,9 +121,8 @@ static bool GetDmesgInfo(QListView *lBox
 		usepipe = true;
 		t = new QTextStream(pipe, QIODevice::ReadOnly);
 	}
-
-	QListViewItem *olditem = NULL;
-	while(!(s = t->readLine().toLocal8Bit()).isEmpty()) {
+	Q3ListViewItem *olditem = NULL;
+	while(!(s = t->readLine().toLocal8Bit()).isNull()) {
 		if (!seencpu) {
 			if (s.contains("cpu"))
 				seencpu = true;
@@ -134,13 +133,11 @@ static bool GetDmesgInfo(QListView *lBox
 			s.contains("WARNING: old BSD partition ID!"))
 			break;
 
-		if (!filter
-		    || (filter[0] == '^' && s.find(&filter[1]) == 0)
-		    || (filter[0] != '^' && s.contains(filter))) {
+		if (!filter || s.contains(QRegExp(filter))) {
 			if (func)
 				func(lBox, s);
 			else
-				olditem = new QListViewItem(lBox, olditem, s);
+				olditem = new Q3ListViewItem(lBox, olditem, s);
 			found = true;
 		}
 	}
@@ -158,75 +155,74 @@ static bool GetDmesgInfo(QListView *lBox
 
 
 void
-AddIRQLine(QListView *lBox, QString s)
+AddIRQLine(Q3ListView *lBox, QString s)
 {
-	int pos, irqnum;
+	int irqnum;
+	QString s2;
 	char numstr[3];
+	bool ok;
 
-	pos = s.find(" irq ");
-	irqnum = (pos < 0) ? 0 : atoi(&s.toAscii()[pos+5]);
-	if (irqnum)
+	s2 = s.mid(s.indexOf(QRegExp("[ (]irq "))+5);
+	irqnum = s2.remove(QRegExp("[^0-9].*")).toInt(&ok);
+	if (ok)
 		snprintf(numstr, 3, "%02d", irqnum);
 	else {
 		// this should never happen
 		strcpy(numstr, "??");
 	}
 
-	new QListViewItem(lBox, numstr, s);
+	new Q3ListViewItem(lBox, numstr, s);
 }
 
-bool GetInfo_IRQ (QListView *lBox)
+bool GetInfo_IRQ (Q3ListView *lBox)
 {
 	lBox->addColumn(i18n("IRQ"));
 	lBox->addColumn(i18n("Device"));
 	lBox->setSorting(0);
 	lBox->setShowSortIndicator(false);
-	(void) GetDmesgInfo(lBox, " irq ", AddIRQLine);
+	(void) GetDmesgInfo(lBox, "[ (]irq ", AddIRQLine);
 	return true;
 }
 
-bool GetInfo_DMA (QListView *)
+bool GetInfo_DMA (Q3ListView *)
 {
 	return false;
 }
 
-bool GetInfo_PCI (QListView *lbox)
+bool GetInfo_PCI (Q3ListView *lbox)
 {
 	if (!GetDmesgInfo(lbox, "at pci", NULL))
-		new QListViewItem(lbox, i18n("No PCI devices found."));
+		new Q3ListViewItem(lbox, i18n("No PCI devices found."));
 	return true;
 }
 
-bool GetInfo_IO_Ports (QListView *lbox)
+bool GetInfo_IO_Ports (Q3ListView *lbox)
 {
 	if (!GetDmesgInfo(lbox, "port 0x", NULL))
-		new QListViewItem(lbox, i18n("No I/O port devices found."));
+		new Q3ListViewItem(lbox, i18n("No I/O port devices found."));
 	return true;
 }
 
-bool GetInfo_Sound (QListView *lbox)
+bool GetInfo_Sound (Q3ListView *lbox)
 {
 	lbox->setSorting(false);
 
 	if (!GetDmesgInfo(lbox, "audio", NULL))
-		new QListViewItem(lbox, i18n("No audio devices found."));
+		new Q3ListViewItem(lbox, i18n("No audio devices found."));
 
 	// append information for each audio devices found
-	QListViewItem *lvitem = lbox->firstChild();
+	Q3ListViewItem *lvitem = lbox->firstChild();
 	for(; lvitem; lvitem = lvitem->nextSibling()) {
-		QString s;
-		int pos, len;
-		const char *start;
+		QString s, s2;
+		int pos;
 		char *dev;
 
 		s = lvitem->text(0);
 		// The autoconf message is in form 'audio0 at auvia0: ...'
 		if (s.find("audio") == 0 && (pos = s.find(" at ")) > 0) {
-			pos += 4;	// skip " at "
-			start = s.toAscii() + pos;
-			len = (int) strcspn(start, ":\n\t ");
-			dev = (char *) malloc(1 + len + 1);
-			sprintf(dev, "^%.*s", len, start);	/* safe */
+			s2 = s.mid(pos+4); // skip " at "
+			s2.remove(QRegExp("[:\n\t ].*"));
+			dev = strdup(s2.toAscii().data());
 
 			GetDmesgInfo(lbox, dev, NULL);
 
@@ -237,19 +233,19 @@ bool GetInfo_Sound (QListView *lbox)
 	return true;
 }
 
-bool GetInfo_Devices (QListView *lBox)
+bool GetInfo_Devices (Q3ListView *lBox)
 {
 	(void) GetDmesgInfo(lBox, NULL, NULL);
 	return true;
 }
 
-bool GetInfo_SCSI (QListView *lbox)
+bool GetInfo_SCSI (Q3ListView *lbox)
 {
 	if (!GetDmesgInfo(lbox, "scsibus", NULL))
-		new QListViewItem(lbox, i18n("No SCSI devices found."));
+		new Q3ListViewItem(lbox, i18n("No SCSI devices found."));
 
 	// remove the 'waiting %d seconds for devices to settle' message
-	QListViewItem *lvitem = lbox->firstChild();
+	Q3ListViewItem *lvitem = lbox->firstChild();
 	for(; lvitem; lvitem = lvitem->nextSibling()) {
 		QString s = lvitem->text(0);
 
@@ -262,12 +258,14 @@ bool GetInfo_SCSI (QListView *lbox)
 	return true;
 }
 
-bool GetInfo_Partitions (QListView *lbox)
+bool GetInfo_Partitions (Q3ListView *lbox)
 {
 	int num; // number of mounts
-	// FIXME: older pkgsrc patches checked ST_RDONLY for this declaration
-	// what is ST_RDONLY and how does it affect getmntinfo?
+#ifdef HAVE_STATVFS
+	struct statvfs *mnt; // mount data pointer
+#else
 	struct statfs *mnt; // mount data pointer
+#endif
 
 	// get mount info
 	if (!(num=getmntinfo(&mnt, MNT_WAIT))) {
@@ -290,24 +288,31 @@ bool GetInfo_Partitions (QListView *lbox
 		unsigned long long big[2];
 		QString vv[5];
 
+#ifdef HAVE_STATVFS
+		big[0] = big[1] = mnt->f_frsize; // coerce the product
+#else
 		big[0] = big[1] = mnt->f_bsize; // coerce the product
+#endif
 		big[0] *= mnt->f_blocks;
 		big[1] *= mnt->f_bavail; // FIXME: use f_bfree if root?
 
 		// convert to strings
 		vv[0] = KIO::convertSize(big[0]);
-		vv[1] = QLatin1String("%1 (%2%%)")
+		vv[1] = QString("%1 (%2%)")
 				.arg(KIO::convertSize(big[1]))
 				.arg(mnt->f_blocks ? mnt->f_bavail*100/mnt->f_blocks : 0);
 
-		// FIXME: these two are large enough to punctuate
-		vv[2] = QString::number(mnt->f_files);
-		vv[3] = QLatin1String("%1 (%2%%) ")
+		vv[2] = QString("%L1").arg(mnt->f_files);
+		vv[3] = QString("%L1 (%2%) ")
 				.arg(mnt->f_ffree)
 				.arg(mnt->f_files ? mnt->f_ffree*100/mnt->f_files : 0);
 
 		vv[4].clear();
+#ifdef HAVE_STATVFS
+#define MNTF(x) if (mnt->f_flag & ST_##x) vv[4] += QLatin1String(#x " ");
+#else
 #define MNTF(x) if (mnt->f_flags & MNT_##x) vv[4] += QLatin1String(#x " ");
+#endif
 		MNTF(ASYNC)
 		MNTF(DEFEXPORTED)
 		MNTF(EXKERB)
@@ -316,7 +321,9 @@ bool GetInfo_Partitions (QListView *lbox
 		MNTF(EXPORTED)
 		MNTF(EXPUBLIC)
 		MNTF(EXRDONLY)
+#ifndef HAVE_STATVFS
 		MNTF(IGNORE)
+#endif
 		MNTF(LOCAL)
 		MNTF(NOATIME)
 		MNTF(NOCOREDUMP)
@@ -335,7 +342,7 @@ bool GetInfo_Partitions (QListView *lbox
 
 		// put it in the table
 		// FIXME: there're more data but we have limited args (this is wrong! just add!)
-		new QListViewItem(lbox,
+		new Q3ListViewItem(lbox,
 			// FIXME: names need pad space
 			mnt->f_mntfromname,
 			mnt->f_mntonname,
@@ -347,7 +354,7 @@ bool GetInfo_Partitions (QListView *lbox
 	return true;
 }
 
-bool GetInfo_XServer_and_Video (QListView *lBox)
+bool GetInfo_XServer_and_Video (Q3ListView *lBox)
 {
 	return GetInfo_XServer_Generic( lBox );
 }
