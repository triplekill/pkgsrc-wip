$NetBSD$

--- src/draw.c.orig	2003-07-21 05:22:33.000000000 +0800
+++ src/draw.c
@@ -857,13 +857,15 @@ p_sumup(intf_cnt_t l, char **unit)
 
         case terabyte:
             *unit = "TB";
-            return ((double) l /1099511627776);
+			l /= 1048576;
+            return ((double) l/1048576);
 
         case dyanmic:
-            if (l >= 1099511627776)
+            if (l/1048576 >= 1048576)
             {
                 *unit = "TB";
-                return ((double) l) / 1099511627776;
+				l/= 1048576;
+                return ((double) l) / 1048576;
             }
             else if (l >= 1073741824)
             {
@@ -1003,47 +1005,55 @@ p_prepare_graph(
 
         case terabyte:
             *rx_unit_y = *tx_unit_y = "TB";
-            for (w=0; w < 6; w++) rx_scale[w] /= 1099511627776;
-            for (w=0; w < 6; w++) tx_scale[w] /= 1099511627776;
-            break;
-
-        case dyanmic:
-            if (rx_scale[4] >= 1073741824)
-            {
-                for (w=0; w < 6; w++) rx_scale[w] /= 1073741824;
-                *rx_unit_y = "GB";
-            }
-            else if (rx_scale[4] >= 1048576)
-            {
-                for (w=0; w < 6; w++) rx_scale[w] /= 1048576;
-                *rx_unit_y = "MB";
-            }
-            else if (rx_scale[4] >= 1024)
-            {
-                for (w=0; w < 6; w++) rx_scale[w] /= 1024;
-                *rx_unit_y = "KB";
-            }
-            else
-                *rx_unit_y = "B ";
-
-            if (tx_scale[4] >= 1073741824)
-            {
-                for (w=0; w < 6; w++) tx_scale[w] /= 1073741824;
-                *tx_unit_y = "GB";
-            }
-            else if (tx_scale[4] >= 1048576)
-            {
-                for (w=0; w < 6; w++) tx_scale[w] /= 1048576;
-                *tx_unit_y = "MB";
-            }
-            else if (tx_scale[4] >= 1024)
-            {
-                for (w=0; w < 6; w++) tx_scale[w] /= 1024;
-                *tx_unit_y = "KB";
-            }
-            else
-                *tx_unit_y = "B ";
-            break;
-    }
+			for (w=0; w < 6; w++) {
+				rx_scale[w] /=1048576 ; 
+				rx_scale[w] /= 1048576;
+			   	/* divide twice by a smaller number rather
+				 * than once by a big number that is too large for a double */ 
+			}
+			for (w=0; w < 6; w++) {
+			   	tx_scale[w] /= 1048576 ;
+				tx_scale[w] /= 1048576 ;
+			}
+			break;
+
+		case dyanmic:
+			if (rx_scale[4] >= 1073741824)
+			{
+				for (w=0; w < 6; w++) rx_scale[w] /= 1073741824;
+				*rx_unit_y = "GB";
+			}
+			else if (rx_scale[4] >= 1048576)
+			{
+				for (w=0; w < 6; w++) rx_scale[w] /= 1048576;
+				*rx_unit_y = "MB";
+			}
+			else if (rx_scale[4] >= 1024)
+			{
+				for (w=0; w < 6; w++) rx_scale[w] /= 1024;
+				*rx_unit_y = "KB";
+			}
+			else
+				*rx_unit_y = "B ";
+
+			if (tx_scale[4] >= 1073741824)
+			{
+				for (w=0; w < 6; w++) tx_scale[w] /= 1073741824;
+				*tx_unit_y = "GB";
+			}
+			else if (tx_scale[4] >= 1048576)
+			{
+				for (w=0; w < 6; w++) tx_scale[w] /= 1048576;
+				*tx_unit_y = "MB";
+			}
+			else if (tx_scale[4] >= 1024)
+			{
+				for (w=0; w < 6; w++) tx_scale[w] /= 1024;
+				*tx_unit_y = "KB";
+			}
+			else
+				*tx_unit_y = "B ";
+			break;
+	}
 
 }
