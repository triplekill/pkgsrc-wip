$NetBSD$

--- kio/kssl/kopenssl.cpp.orig.save	2008-05-01 22:15:25.000000000 +1200
+++ kio/kssl/kopenssl.cpp
@@ -97,9 +97,14 @@ static int  (*K_BIO_write) (BIO *b, cons
 static int (*K_PEM_ASN1_write_bio) (int (*)(),const char *,BIO *,char *,
                                    const EVP_CIPHER *,unsigned char *,int ,
                                             pem_password_cb *, void *) = 0L;
+#if OPENSSL_VERSION_NUMBER < 0x00909000L
 static ASN1_METHOD* (*K_X509_asn1_meth) (void) = 0L;
 static int (*K_ASN1_i2d_fp)(int (*)(),FILE *,unsigned char *) = 0L;
 static int (*K_i2d_ASN1_HEADER)(ASN1_HEADER *, unsigned char **) = 0L;
+#else
+static int (*K_ASN1_item_i2d_fp)(ASN1_ITEM *,FILE *,unsigned char *) = 0L;
+static ASN1_ITEM *K_NETSCAPE_X509_it = 0L;
+#endif
 static int (*K_X509_print_fp)  (FILE *, X509*) = 0L;
 static int (*K_i2d_PKCS12)  (PKCS12*, unsigned char**) = 0L;
 static int (*K_i2d_PKCS12_fp)  (FILE *, PKCS12*) = 0L;
@@ -237,7 +242,7 @@ void KOpenSSLProxy::destroy() {
    delete x;
 }
 
-#ifdef __OpenBSD__
+#if defined(__OpenBSD__) || defined(__NetBSD__) || defined(__DragonFly__)
 #include <QtCore/QDir>
 #include <QtCore/QString>
 #include <QtCore/QStringList>
@@ -260,10 +265,20 @@ static QString findMostRecentLib(QString
        for (QStringList::Iterator it = l.begin(); it != l.end(); ++it) {
                QString numberpart = (*it).mid(s);
                uint endmaj = numberpart.indexOf('.');
-               if (endmaj == -1)
-                       continue;
                bool ok;
-               int maj = numberpart.left(endmaj).toInt(&ok);
+               int maj;
+	       if (endmaj == -1) {
+		      int maj = numberpart.toInt(&ok);
+                      if (!ok)
+			      continue;
+                      if (maj <= bestmaj)
+		              continue;
+                      bestmaj = maj;
+                      bestmin = -1;
+		      best = (*it);
+		      continue;
+               }
+	       maj = numberpart.left(endmaj).toInt(&ok);
                if (!ok)
                        continue;
                int min = numberpart.mid(endmaj+1).toInt(&ok);
@@ -296,54 +311,23 @@ KOpenSSLProxy::KOpenSSLProxy()
    if (!upath.isEmpty())
       libpaths << upath;
 
-#ifdef Q_OS_WIN
-    d->cryptoLib = new KLibrary("libeay32.dll");
-    if (!d->cryptoLib->load()) {
-       delete d->cryptoLib;
-       d->cryptoLib = 0;
-    }
-#elif defined(__OpenBSD__)
-   {
-   QString libname = findMostRecentLib("/usr/lib" KDELIBSUFF, "crypto");
-   if (!libname.isNull()) {
-         d->cryptoLib = new KLibrary(libname);
-         d->cryptoLib->setLoadHints(QLibrary::ExportExternalSymbolsHint);
-         if (!d->cryptoLib->load()) {
-             delete d->cryptoLib;
-             d->cryptoLib = 0;
-         }
-   }
-   }
-#elif defined(__CYGWIN__)
-   libpaths << "/usr/bin/"
-   		<< "/usr/local/bin"
-   		<< "/usr/local/openssl/bin"
-   		<< "/opt/openssl/bin"
-   		<< "/opt/kde3/bin"
-   		<< "";
-
-   libnamess << "cygssl-0.9.7.dll"
-		 << "cygssl.dll"
-		 << "libssl.dll"
-		 << "";
-
-   libnamesc << "cygcrypto.dll"
-		 << "libcrypto.dll"
-		 << "";
-#else
    libpaths
-            #ifdef _AIX
+#ifdef _AIX
             << "/opt/freeware/lib/"
-	    #endif
+#endif
 	    << "/usr/lib" KDELIBSUFF "/"
+	    << "/usr/pkg/lib/"
+#if !defined(__NetBSD__) && !defined(__OpenBSD__) && !defined(__DragonFly__)
 	    << "/usr/ssl/lib" KDELIBSUFF "/"
 	    << "/usr/local/lib" KDELIBSUFF "/"
             << "/usr/local/openssl/lib" KDELIBSUFF "/"
             << "/usr/local/ssl/lib" KDELIBSUFF "/"
 	    << "/opt/openssl/lib" KDELIBSUFF "/"
 	    << "/lib" KDELIBSUFF "/"
+#endif
             << "";
 
+#if !defined(__NetBSD__) && !defined(__OpenBSD__) && !defined(__DragonFly__)
 // FIXME: #define here for the various OS types to optimize
    libnamess
 	     #ifdef hpux
@@ -383,6 +367,17 @@ KOpenSSLProxy::KOpenSSLProxy()
    for (QStringList::Iterator it = libpaths.begin();
                               it != libpaths.end();
                               ++it) {
+#if defined(__NetBSD__) || defined(__OpenBSD__) || defined(__DragonFly__)
+      QString libname = findMostRecentLib(*it, "crypto");
+      if (!libname.isNull()) {
+         d->cryptoLib = new KLibrary(libname);
+         d->cryptoLib->setLoadHints(QLibrary::ExportExternalSymbolsHint);
+         if (!d->cryptoLib->load()) {
+             delete d->cryptoLib;
+             d->cryptoLib = 0;
+         }
+      }
+#else
       for (QStringList::Iterator shit = libnamesc.begin();
                                  shit != libnamesc.end();
                                  ++shit) {
@@ -405,6 +400,7 @@ KOpenSSLProxy::KOpenSSLProxy()
              d->cryptoLib = 0;
          }
       }
+#endif
       if (d->cryptoLib) break;
    }
 
@@ -441,9 +437,14 @@ KOpenSSLProxy::KOpenSSLProxy()
       K_BIO_ctrl = (long (*) (BIO *,int,long,void *)) d->cryptoLib->resolveFunction("BIO_ctrl");
       K_BIO_write = (int (*) (BIO *b, const void *data, int len)) d->cryptoLib->resolveFunction("BIO_write");
       K_PEM_ASN1_write_bio = (int (*)(int (*)(), const char *,BIO*, char*, const EVP_CIPHER *, unsigned char *, int, pem_password_cb *, void *)) d->cryptoLib->resolveFunction("PEM_ASN1_write_bio");
+#if OPENSSL_VERSION_NUMBER < 0x00909000L
       K_X509_asn1_meth = (ASN1_METHOD* (*)(void)) d->cryptoLib->resolveFunction("X509_asn1_meth");
       K_ASN1_i2d_fp = (int (*)(int (*)(), FILE*, unsigned char *)) d->cryptoLib->resolveFunction("ASN1_i2d_fp");
       K_i2d_ASN1_HEADER = (int (*)(ASN1_HEADER *, unsigned char **)) d->cryptoLib->resolveFunction("i2d_ASN1_HEADER");
+#else
+      K_ASN1_item_i2d_fp = (int (*)(ASN1_ITEM *, FILE*, unsigned char *)) _cryptoLib->symbol("ASN1_item_i2d_fp");
+      K_NETSCAPE_X509_it = (ASN1_ITEM *) _cryptoLib->symbol("NETSCAPE_X509_it");
+#endif
       K_X509_print_fp = (int (*)(FILE*, X509*)) d->cryptoLib->resolveFunction("X509_print_fp");
       K_i2d_PKCS12 = (int (*)(PKCS12*, unsigned char**)) d->cryptoLib->resolveFunction("i2d_PKCS12");
       K_i2d_PKCS12_fp = (int (*)(FILE *, PKCS12*)) d->cryptoLib->resolveFunction("i2d_PKCS12_fp");
@@ -534,28 +535,20 @@ KOpenSSLProxy::KOpenSSLProxy()
 #endif
    }
 
-#ifdef Q_OS_WIN
-    d->sslLib = new KLibrary("ssleay32.dll");
-    if (!d->sslLib->load()) {
-       delete d->sslLib;
-       d->sslLib = 0;
-    }
-#elif defined(__OpenBSD__)
-   {
-   QString libname = findMostRecentLib("/usr/lib", "ssl");
-   if (!libname.isNull()) {
-         d->sslLib = new KLibrary(libname);
-         d->sslLib->setLoadHints(QLibrary::ExportExternalSymbolsHint);
-         if (!d->sslLib->load()) {
-             delete d->sslLib;
-             d->sslLib = 0;
-         }
-   }
-   }
-#else
    for (QStringList::Iterator it = libpaths.begin();
                               it != libpaths.end();
                               ++it) {
+#if defined(__OpenBSD__) || defined(__NetBSD__) || defined(__DragonFly__)
+      QString libname = findMostRecentLib(*it, "ssl");
+      if (!libname.isNull()) {
+	    d->sslLib = new KLibrary(libname);
+	    d->sslLib->setLoadHints(QLibrary::ExportExternalSymbolsHint);
+	    if (!d->sslLib->load()) {
+	        delete d->sslLib;
+		d->sslLib = 0;
+	    }
+      }
+#else
       for (QStringList::Iterator shit = libnamess.begin();
                                  shit != libnamess.end();
                                  ++shit) {
@@ -577,9 +570,9 @@ KOpenSSLProxy::KOpenSSLProxy()
              d->sslLib = 0;
          }
       }
+#endif
       if (d->sslLib) break;
    }
-#endif
 
    if (d->sslLib) {
 #ifdef KSSL_HAVE_SSL
@@ -997,6 +990,8 @@ int KOpenSSLProxy::PEM_write_bio_X509(BI
 }
 
 
+#if OPENSSL_VERSION_NUMBER < 0x00909000L
+
 ASN1_METHOD *KOpenSSLProxy::X509_asn1_meth(void) {
    if (K_X509_asn1_meth) return (K_X509_asn1_meth)();
    else return 0L;
@@ -1008,6 +1003,13 @@ int KOpenSSLProxy::ASN1_i2d_fp(FILE *out
         return (K_ASN1_i2d_fp)((int (*)())K_i2d_ASN1_HEADER, out, x);
    else return -1;
 }
+#else
+int KOpenSSLProxy::ASN1_i2d_fp(FILE *out,unsigned char *x) {
+   if (K_ASN1_item_i2d_fp && K_NETSCAPE_X509_it)
+        return (K_ASN1_item_i2d_fp)(K_NETSCAPE_X509_it, out, x);
+   else return -1;
+}
+#endif
 
 
 int KOpenSSLProxy::X509_print(FILE *fp, X509 *x) {
